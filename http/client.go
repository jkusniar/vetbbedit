// Code generated by go-bindata.
// sources:
// client/app.js
// client/index.html
// DO NOT EDIT!

package http

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clientAppJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\xcd\x6e\xdb\xb8\x13\xbf\xfb\x29\x06\x6a\x01\xd9\xf8\xdb\x32\x72\x2b\x64\xf8\xd0\x36\xfd\x63\x8b\x45\xe2\x22\xfd\x00\xb6\x41\x0e\x8c\x34\xb6\x89\x48\xa4\x96\xa4\x9c\xa4\x85\xef\x7b\xe9\x43\xf4\xb0\x87\x3d\xec\x2b\xf4\xd2\xe6\xbd\x16\xa4\x28\x59\x1f\x94\xed\x6c\xd7\x87\x44\xe6\xfc\x86\xf3\xf5\xe3\x70\x64\x2f\x97\x08\x52\x09\x1a\x29\x6f\x36\x18\x7c\xc8\x31\xc8\x25\x0e\x3f\xe4\x78\x46\x14\x0a\x4a\x92\xd1\xac\xbe\xfa\xfa\xe4\x19\x1b\xcd\x06\x83\x88\x33\xa9\x80\x9e\x3c\x63\x30\x07\x86\xb7\x60\x65\xc3\xcf\x03\x00\x80\x84\x47\x24\xc1\x10\x7c\x79\xe3\x8f\x01\xa6\x53\x78\xb7\x38\x5d\x84\x20\x51\x59\x19\x2c\x05\x4f\x21\x4a\x28\x32\x65\x54\x52\x94\x92\xac\x50\x86\x50\x6c\xa1\x3f\xc8\xea\xdf\x6a\xa8\xf6\xb2\xfe\x30\xbc\x95\x21\xf8\xe7\x78\x2b\xfd\xb1\x53\xfa\x0e\xef\x94\x45\x80\xc2\x3b\xd5\x03\x7b\x93\x90\x08\xd7\x3c\x89\x51\x84\xe0\xbf\xbb\xcf\xd0\x2c\x03\x61\x31\x64\x02\xa5\x04\x64\x0a\x85\x43\x5b\xa2\xd8\xd0\x48\xc7\xe0\xbf\xb5\x8f\xfd\x28\xeb\x8d\x05\xf6\x39\x64\xc1\x0e\x9f\xac\xe4\x08\xb7\xd6\x3c\x17\xda\xa7\x45\x86\x8c\xb2\x55\xf1\xdd\x81\x8b\xc9\x7d\x08\xfe\x29\xb9\x77\xc8\x48\x1a\x82\xff\xfc\xcc\x21\xc9\xb4\xe4\x8d\x4b\xb2\xe4\x5c\x31\xae\x70\x97\xf7\x6a\xa9\x2f\xdc\x52\xee\x88\xb7\x52\x3d\x1c\x70\x94\x70\x89\x2f\x14\x0b\xc1\x7f\xa9\x1f\x5d\x79\x25\x1b\x8c\x17\x37\xba\x00\xfa\x09\x16\xbf\x3a\x40\x28\xc4\x39\xbf\x40\x99\x71\x26\x35\x9b\x5f\x5d\x5c\x2c\x2e\x42\x38\xe7\x20\xec\xa2\xdf\xd0\xd9\x56\xdf\xb6\xbb\xcd\xe4\xcd\xe3\x49\xbc\xf8\xc4\x48\xea\x2a\x43\x8d\xc6\xfa\x1f\x70\x0d\xcc\x8f\x22\xf2\x39\xc9\xbe\xff\xfd\xf0\xb5\x50\x01\x02\x52\x25\xe4\xc7\x97\xa3\xb8\x9c\xe4\x0f\xdf\xae\x5d\xee\x34\xa9\xfc\x91\x21\xa3\x08\xf2\x10\xdc\xed\x57\xa1\x96\x1f\xf6\xac\xa2\xb3\x88\x29\x23\x3f\xbe\xb0\xef\x7f\xc1\x9a\xc7\x94\xb9\x4c\x5a\x4e\xe3\xc3\x1f\x7d\xa4\x3e\xe5\xfc\x1a\x63\x57\x0e\x0b\x66\x1b\xb1\x8b\x42\x2d\x7a\x9b\x7a\x64\xfc\x13\xfb\xfe\x35\xbd\x71\xb9\xe2\xe6\x76\x19\x7e\xa9\x79\x44\x02\x6a\xf4\xfe\x48\xd4\x86\x0b\xfa\xf0\xe7\x5e\x8a\xbf\x4f\xf8\xc3\x37\xd4\x79\x3a\x8a\xe6\x2f\x7f\xf9\xed\xc5\xf3\xd0\x54\x0b\x05\x30\xe4\x71\xc6\x37\x18\x93\xa4\x97\xed\x83\xe2\xef\x56\x5f\x0d\x83\xe9\x14\x36\x29\x50\x09\x9b\x1c\x81\x32\xa9\x08\xb3\x6d\x0a\x85\xe0\x42\x4b\x8a\x07\x81\x32\x4f\x14\x08\x54\xb9\x60\x18\xc3\xf5\x3d\x90\x3b\xca\xe5\x60\x99\xb3\x48\x51\xce\x40\xae\xf9\xed\x2b\x8d\x1d\x6e\xd2\x71\xa1\x35\xb2\xa7\x86\x2e\x61\x68\x16\x82\xf2\x2c\x8e\x6a\xe7\x49\xdf\x4f\x3c\xc1\x20\xe1\xab\x16\x2a\x88\x89\x22\xa3\xd9\x31\x48\xa9\x88\xca\xe5\x71\xd8\x35\x92\x18\x45\x1d\xbc\x49\x8d\xf4\x4c\xae\x60\x0e\x0e\x1f\x0a\xe4\x16\x30\x91\xd8\x88\xe6\xf7\x1c\xa5\x3a\x14\x4c\x01\xea\xb1\xb6\x49\x83\xa7\x6a\xe8\xd9\x3e\x13\x34\xea\xeb\x8d\x1a\x86\xdd\x56\x7c\x93\x74\xdf\xa6\x3c\xb0\x1b\xed\x0f\xce\x82\xec\xee\x03\xb7\xe3\x11\x67\x4b\xba\xd2\x34\xb1\xbb\xe8\x0a\x9f\x15\x9a\xc3\xd1\x60\x3b\x18\xd8\x61\xc2\x0e\x12\x98\x84\xe0\x3f\x21\x59\x66\x69\xab\x27\x8e\xd0\xfc\x2d\xbe\xeb\x44\xd6\xfb\x68\xd1\x3f\x2f\xaf\xc6\xf5\x95\x73\xb3\xe8\x79\xb5\x9e\x5c\x35\xb7\x16\xd4\xde\xc6\x4d\xb4\x6d\x38\x9f\xb7\x0d\xe8\xff\xed\x71\x6e\x62\x6d\x56\x9a\x8b\x99\xe0\x69\xa6\xda\xfd\x5e\x51\x65\x66\xa4\xb7\xa8\x9c\x57\x72\xd6\xbd\x03\x0d\x2c\x08\x82\x16\x72\x43\x92\x5c\xfb\x71\x77\xe7\x35\x05\x24\xd5\x3d\xcc\x6b\xad\x52\x16\xe3\x5d\x08\x93\x13\xd7\x75\x95\x67\x09\x27\x31\x65\xab\x10\x96\x24\x91\x38\xa8\xc9\x53\x9e\x33\x85\x71\x08\xd5\x01\x1d\xd6\x79\xaa\xd6\x54\x06\x2b\x54\xa7\x44\x91\x61\x49\x33\xab\x89\x6a\xcd\xe3\xc6\x70\x67\x81\x7d\x9b\x55\x1b\x9a\xd9\x6b\x0e\x97\x57\xb3\x56\xcc\x42\xb7\x99\xb9\x01\x35\x45\xa6\x89\x68\x47\x86\xfe\x54\x13\xc4\x1f\x75\x5a\x5e\xa0\xd6\xc8\x86\x3b\xcb\xae\x1e\xd2\xb0\x96\x96\x7e\x34\xce\xb0\x59\x0c\xa8\xc2\xb4\xe5\x42\x4d\xaf\xe4\x5a\x47\xb7\x14\x1c\xd0\x37\x35\xef\x28\x9b\xd5\xae\xce\xd6\x11\x6a\x44\x54\xb4\xae\xc5\xda\x68\xa3\xed\x8f\xab\xe3\xba\xcc\xcc\x5c\xdc\xe1\xec\xbc\x3c\x6d\x35\x73\x1b\x64\xaa\x6d\x4e\xf7\xbb\xb2\xba\x5a\xc1\xe5\x4e\x55\xfd\x20\xcb\xe5\xba\x09\xef\xba\x54\x17\xc3\x1c\x3c\x6f\x76\x78\x34\x13\x98\xf2\x0d\xb6\x1d\x36\xc7\xa3\x97\x8a\x81\xcc\x12\x1a\x61\x81\x1a\xc3\xc9\x9e\x4c\x54\xcd\xe4\x11\xc9\xb0\x3a\xbd\xf9\xa8\x48\xd3\xc8\x49\xa9\xd5\x9f\x96\xf2\x35\xe3\x51\x99\x71\x04\xd0\x9f\x9c\xca\xb3\xe3\x13\xb4\x6b\xa1\x8f\xc8\x50\xa9\xd4\x9b\xa2\xa2\x49\x96\xd3\x56\x2b\x53\x95\x76\x7f\xaa\x4a\xc8\xe3\x72\xe5\x8a\xa5\x3f\x59\x6d\x1f\x8f\xca\x99\x39\x9b\x31\xd5\x6d\x13\x4f\x29\x49\xf8\xea\xa0\xb1\xfa\x0d\x5c\x00\xdc\xd5\xc8\x90\x75\x77\x14\xb8\x1c\x9b\x2b\x64\x0c\xce\xcd\xa7\x53\xf3\x42\x9f\xc6\x13\xad\x3f\xd1\x6f\xf4\x73\xef\x09\x8d\x27\x7c\x39\xa1\x11\x67\x93\x88\xa7\x19\x67\xc8\x94\xa7\x41\x66\x6c\x9d\x28\xde\x87\xe9\x66\xa9\xb8\x37\x03\xed\x02\xcc\x8d\x27\xb3\x5e\x90\xf1\x10\xe6\x85\xa7\x76\xbe\xa8\xd3\xa7\xd8\x64\x3e\x07\x8f\xa4\x5e\x2f\x77\xec\x66\xe6\x42\xb5\x77\x8b\xad\x55\x4c\xee\xe5\xa5\xd9\xfc\x2a\x20\x2d\x3f\x6a\x43\xdc\xce\x4c\xf6\xd3\x66\xda\xe1\x76\x46\x36\x57\x95\xbd\x17\x24\x2e\x06\x02\x58\x72\x51\x4e\x00\xf0\x3f\xf3\x34\x6a\xd3\xb9\x9b\xce\xa7\x02\x97\xf2\x52\xe0\xf2\x2a\xd0\x55\x1d\xba\x09\x63\x6a\xe9\x64\x8c\x93\xee\xb5\x4d\x8d\x66\xcf\xae\x9c\xbd\x66\x59\xae\xea\x3b\x32\xbc\xfd\xa0\x83\xe9\xed\x08\x0d\x8e\x1c\x2a\x6f\x2d\xc7\x1d\xee\xe8\xb2\x16\x3f\x66\x19\x83\xbd\x15\x76\x5b\xdd\x57\xed\xfd\x56\xb3\x83\x56\xff\x65\xc1\xdb\x8e\x76\x8a\xef\xa8\x80\x7e\x67\x7c\xce\xe2\xf7\x66\x08\x3c\x38\x9a\xed\x5e\x01\xda\x8d\x72\xcf\x74\xb6\x49\x83\x6a\xc6\xd4\x00\xd1\x8e\xba\x18\xdf\xb2\xbc\x1a\xdf\xc6\xbd\x3f\x94\x7c\x36\xa3\x53\xb8\xbb\x9d\xb7\xfb\x7e\xc8\x68\xa0\xcb\x65\x87\x86\x9d\xf7\x77\xb5\x6b\xe6\xed\x3f\x99\x26\xeb\x29\x30\x73\x76\xef\xfc\xb7\x4b\x72\xfb\xbd\xce\xbe\xe0\x7b\x8e\xbb\x0c\x5c\x6f\x57\x6d\xc0\x4f\x0f\x8b\xc7\xc7\xf1\x53\x63\x65\x2d\x8a\x83\x94\x34\x9d\x26\x90\x8c\x44\x37\xd7\x44\x74\x5b\xd8\xee\x97\x8a\x7f\x02\x00\x00\xff\xff\x26\x88\x2a\xac\xfb\x16\x00\x00")

func clientAppJsBytes() ([]byte, error) {
	return bindataRead(
		_clientAppJs,
		"client/app.js",
	)
}

func clientAppJs() (*asset, error) {
	bytes, err := clientAppJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/app.js", size: 5883, mode: os.FileMode(420), modTime: time.Unix(1511978422, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clientIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x58\xdd\x8e\xdb\xb6\x12\xbe\xdf\xa7\xe0\x21\x02\x78\x17\x67\x25\x39\x69\x8b\x06\x0b\xcb\x4d\x9a\xa4\x40\x5a\x24\x0d\xda\x04\x68\xaf\x0a\x4a\x1c\xdb\xac\x29\x92\x25\x29\x79\x8d\x45\x1e\x26\xcf\x52\xf4\xbd\x0a\x52\xa2\x2d\xc9\x72\x6c\x27\xdb\x4d\x53\x5f\x99\xe4\xcc\x37\x9c\x6f\x7e\x3c\xe6\xe4\x7f\x4f\x7f\x7c\xf2\xfa\xd7\x57\xcf\xd0\xc2\x16\x7c\x7a\x36\x59\x00\xa1\xd3\x33\x84\x10\x9a\x14\x60\x09\xca\x17\x44\x1b\xb0\x29\x2e\xed\x2c\x7a\x88\xdb\x47\x0b\x6b\x55\x04\x7f\x94\xac\x4a\xf1\x2f\xd1\x9b\xc7\xd1\x13\x59\x28\x62\x59\xc6\x01\xa3\x5c\x0a\x0b\xc2\xa6\xf8\xf9\xb3\x14\xe8\x1c\x3a\x9a\x82\x14\x90\x62\x0a\x26\xd7\x4c\x59\x26\x45\x4b\xbe\x02\x0b\x9a\x09\x92\x65\xb1\x59\x22\xa0\xcc\x4a\x3d\xa0\x4c\x4a\xbb\x90\xba\xa5\xf7\xfd\x9f\xef\x04\xfa\xa1\xfc\xeb\x9d\x60\x64\x48\xa1\x62\xb0\x52\x52\xdb\x96\xca\x8a\x51\xbb\x48\x29\x54\x2c\x87\xc8\x2f\x2e\x11\x13\xcc\x32\xc2\x23\x93\x13\x0e\xe9\xfd\x78\x7c\x89\x0a\x26\x58\x51\x16\xdb\xad\x80\x6e\x99\xe5\x30\x1d\xba\xf0\x24\xa9\xcf\xce\x6a\x41\xce\xc4\x12\x69\xe0\x29\x36\x76\xcd\xc1\x2c\x00\x2c\x46\x0b\x0d\xb3\x14\x27\xc9\x4c\x0a\x6b\xe2\xb9\x94\x73\x0e\x44\x31\x13\xe7\xb2\x48\x72\x63\xbe\x99\x91\x82\xf1\x75\xfa\x93\xcc\xa4\x95\x57\x5f\x8c\xc7\x97\x5f\x8e\xc7\x97\x5f\x8d\xc7\x97\x5f\xd7\xdf\x99\x25\x9c\xe5\xe1\x3a\x1f\x60\x85\xe5\x52\x04\x33\x2f\x88\xf3\x83\xf0\xff\x3f\xcf\xa5\x30\xc7\x80\xba\x04\x30\x57\x49\x52\x0a\xb5\x9c\x7b\xbc\xaa\x84\xa8\x68\x70\x12\xca\x8c\xed\xec\xc4\xb9\x71\xb8\x35\x70\x1d\x7b\x64\x74\xbe\x07\x68\xa3\x1f\xff\x6e\xf0\x74\x92\xd4\x0a\xd3\x23\xb5\x37\x46\x3f\x40\x95\xdd\x7f\x28\xb6\xb7\x77\xab\xd3\xaf\x40\xae\x99\x34\x35\x88\xff\x1a\x17\xac\x8f\x32\x49\xea\x62\x9b\x64\x92\xae\xa7\x67\x13\xca\x2a\xc4\x68\x8a\x89\x52\x9b\xfc\xa5\x91\x95\x92\x67\x44\xa3\x9c\x13\x63\x52\x5c\xd0\x88\x82\x30\xa1\x9e\xbc\xd4\xe2\x41\xeb\xd4\x27\x1e\x46\x3e\x5a\x29\x9e\x71\xb8\xbe\x42\xf7\x71\x37\x4b\x27\xc9\xe2\x41\x4b\xbf\xa0\x91\x51\x4c\x08\xd0\xa8\xa0\x11\x13\xd4\xc9\x16\x4c\x10\x0b\x2d\x60\x92\xe7\x20\x2c\x46\x55\xc4\x66\x29\x2e\x15\x97\x84\x32\x31\x77\x1e\x6d\x01\xba\xa8\x59\x69\xad\x14\x2d\x0c\x97\x6f\xcd\x2e\x46\x8f\x72\xce\xf2\x65\x2c\x88\x65\x15\xa4\xd8\x90\x0a\x1e\x0b\xfa\xc6\x03\xb7\xdc\x0b\x60\x4e\x77\x9a\x91\x7c\x59\x2a\x6f\xd1\xaf\xb7\xe6\x92\x8d\xbd\x86\xbb\x64\x4b\x5e\xb3\xe3\x08\x0e\x77\x21\x4c\x44\x4d\x23\x08\x29\x19\x0c\x51\x46\xb8\x9c\x47\x4a\xcb\x42\xd9\xce\x35\xdc\xe7\x2a\x70\x9c\xe2\x5a\x22\xae\x19\x1f\x14\x64\x42\x95\x36\x52\x9c\xe4\xb0\x90\x9c\x82\xde\x28\xb5\xf6\x06\x54\x2b\xc2\xcb\xad\x01\xbf\xda\x95\x7a\xe4\xd1\x53\x2c\xc5\x73\xf7\x65\x57\xc0\x17\x69\x8d\xf1\xd4\xfb\x84\x7b\x7c\x75\x3c\xed\xb1\x60\x49\x66\x5c\x3a\xcc\xd8\x35\xd0\xdd\x68\x58\x92\xf9\x64\x15\xb0\x32\x2e\x27\x32\x26\xa8\xf3\x98\x93\xcc\x35\x8b\x7b\xf6\x7c\x54\x80\x31\x64\x0e\xb1\x13\x19\x5d\xf4\x22\xba\x89\xaa\x67\xc8\x45\x82\xb0\x4e\xfe\x74\x04\x3d\xea\xf4\xe6\x06\xdd\xb3\xe7\xb8\x8d\xfb\x1a\xae\x2d\xbe\x40\x6f\xdf\x4e\x92\x5a\x66\x58\x3f\x18\x0a\x17\xed\x44\xa4\x7f\xd7\x57\xdb\xc3\xd1\x05\x46\x8f\x96\xb0\x2e\x55\x0c\xc2\x82\xde\x24\xab\x14\x2f\x61\xf5\xd2\xf9\x3e\x68\x70\xfb\xa9\xa2\x42\x52\xc7\x88\x68\xe4\xeb\x72\xf1\xb7\x19\x60\x24\x19\xa2\x64\x90\x38\xce\xcc\x00\x40\xfb\x34\x62\x16\x0a\x54\x45\x33\xa9\x53\x7c\xee\x16\xee\xe7\x8d\xc2\xf5\x05\x62\x02\x75\x02\xb7\x84\x75\x8a\x9d\xc4\x40\x94\x3a\x24\xba\x9a\x63\x62\x26\x7f\x93\xa5\xe5\x4c\xc0\x40\x25\xee\xe8\x19\x45\xc4\x14\xdd\xdc\x20\x7f\x1f\x17\x2a\xbf\xf3\x5e\x43\xef\xeb\x1c\x28\xf8\x47\xf2\x7a\x76\xe8\x35\x12\x0d\x85\xac\xc0\x91\x7d\x5e\xbb\xfb\x1e\xa7\xda\x8e\xb5\xac\x29\xcd\x0a\xa2\xd7\x78\x4a\x81\x83\x3d\xca\xcb\x7e\xff\x19\x14\xd8\x84\x65\x4f\xe8\x77\x83\x5a\xb7\x31\x92\xf5\xb2\xa0\x5d\x82\x06\xb4\x9b\x60\x0e\x95\x61\x10\xfb\x27\x4a\xb1\xc1\xbe\xed\x6a\x6c\x60\x8f\x2e\xc8\x9f\x6b\xf9\x53\x6a\x32\xa8\xfc\x5b\xca\x72\x27\x98\x77\x5a\x9a\xe8\x6e\x6a\xb3\x21\xfd\x3f\x55\x9e\xfd\x2b\x87\xea\x5c\xc8\x52\x1f\x2a\x4d\x2f\xb3\xb7\x2e\x2d\xc9\xdc\x5f\x89\x7d\xdc\xf8\xe3\xc8\x8d\x92\xfb\x6a\xb6\x2b\xa9\xe5\xea\x30\xe1\x5b\xd0\x7e\xa9\x53\xb2\x6e\x4a\xbc\x2b\xf6\x11\x90\xa4\xb8\x6d\x44\x75\x22\x62\x4b\x70\x2f\x3d\x3d\xb0\xc1\x0e\xd0\xbd\x59\x3d\xd7\x1f\xf6\x40\xcb\xd5\xa6\x1f\x68\xb9\x6a\xb7\x03\x9f\x19\x8e\x73\x83\x51\xd3\x0a\xdc\xd9\x11\x25\x53\x43\xe7\xc0\x7d\xb3\xd6\x72\xe5\x50\xba\x9c\xf8\xc3\x53\x80\x0e\xf4\xd5\xd0\x50\x1a\x7b\xe4\x98\x1f\xfb\xb6\xa5\x93\xfe\x2e\x48\x05\xa2\x9e\x6a\xcf\x47\xed\x19\x77\x74\x89\x46\xa4\x18\x05\x12\x0f\x30\xd5\x36\xef\x3b\x88\xfb\xff\x7e\x44\x3f\xd9\xe8\x1d\xea\x2b\x1d\xc1\x3b\xa1\x5d\x7d\x32\xda\xd5\x67\x4c\xfb\x89\x1d\x60\xb8\xb4\xb7\x02\x7b\xa6\x83\x8f\x18\xb1\x66\x52\x5a\x21\xed\xad\xcf\x58\x01\xf7\xe8\x21\xeb\xbb\x46\xe1\x94\x29\x6b\xa3\x73\x9b\x63\x16\x0a\x6f\x21\x1f\x33\x6f\xd5\x0d\x36\x90\x70\xe2\xd8\xf5\x89\xc6\xa7\xc0\xe6\x67\x3a\x3f\x1d\x18\xa0\xc2\x8e\x09\xef\x38\x94\x55\xe1\xd1\xb0\xa0\x91\x11\x24\x5f\x66\x44\xd7\xaf\x1b\x61\xd5\x7e\xd9\xd8\x34\x43\x30\xea\x85\x99\x0f\x74\xc3\x56\x18\x7a\x04\xdf\xd3\x30\x33\x71\x40\x8d\x73\x2e\x0d\x9c\x5f\xe0\x7e\x31\xfa\xfd\x6f\xad\xd8\x4e\x19\x3b\x4f\x4f\x01\x63\x7a\xd6\x78\x10\x1e\x0c\x29\xcc\x40\xd7\xcf\x86\x44\xa9\x9d\x37\xc1\xe6\x31\x30\xf1\xef\xf1\x7f\x07\x00\x00\xff\xff\x21\x07\xc4\x94\x9f\x17\x00\x00")

func clientIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_clientIndexHtml,
		"client/index.html",
	)
}

func clientIndexHtml() (*asset, error) {
	bytes, err := clientIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/index.html", size: 6047, mode: os.FileMode(420), modTime: time.Unix(1511725059, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"client/app.js": clientAppJs,
	"client/index.html": clientIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"client": &bintree{nil, map[string]*bintree{
		"app.js": &bintree{clientAppJs, map[string]*bintree{}},
		"index.html": &bintree{clientIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

