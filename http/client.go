// Code generated by go-bindata.
// sources:
// client/app.js
// client/index.html
// DO NOT EDIT!

package http

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clientAppJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\xcd\x6e\xe3\x36\x10\xbe\xeb\x29\x06\xda\x02\x96\x51\x5b\xc6\x5e\x6d\xf8\xd0\x62\x5b\xa0\x28\x92\x1e\xd2\xe6\x12\xe4\xc0\x48\x23\x5b\xa8\x44\xaa\x24\xa5\x24\x08\xfc\xee\x05\x49\x49\x26\x25\x32\xb6\xdb\x02\xd5\xc9\x26\xbf\xf9\xfb\x66\x38\x1c\xc6\xad\x40\x10\x92\x97\x99\x8c\x77\x51\xf4\xd8\x62\xda\x0a\x4c\x1e\x5b\xbc\x23\x12\x79\x49\xaa\xe5\x2e\x8a\x36\x1b\xe8\x6a\x28\x05\x74\x2d\x42\x49\x85\x24\x34\x43\x20\x34\x07\xe4\x9c\x71\xb5\x63\x7e\x70\x14\x6d\x25\x81\xa3\x6c\x39\xc5\x1c\x5e\xde\x81\xbc\x95\x4c\x44\x45\x4b\x33\x59\x32\x0a\xe2\xc8\x5e\x7f\x52\xd8\xa4\xab\x57\x46\x6a\x09\x1f\x11\x00\x40\x59\x40\xa2\x17\x52\x8e\xa2\x61\x54\xe0\xb0\xa3\xbe\x8c\x51\xc1\x2a\x4c\x2b\x76\x98\xa0\xd2\x9c\x48\xb2\xdc\x5d\x83\x14\x92\xc8\x56\x5c\x87\x3d\x22\xc9\x91\xdb\xe0\xae\xd6\xbb\x77\xe2\x00\x7b\xf0\xf8\x60\x90\x27\xc0\x4a\xa0\x13\xcd\x5f\x2d\x0a\x79\x29\x18\x03\x0a\x58\x8b\x29\x83\xc1\x56\xec\xd8\xf1\x2b\x5d\x68\x8e\x17\x3d\xc3\x69\x8d\x42\x90\x03\x7e\x1e\x4b\x0f\xea\xb5\x47\x7e\x3f\x33\x46\x8b\xf2\xa0\x8a\xa2\xd7\xa2\x12\x7a\x67\x24\x93\x65\x74\x8a\x22\x8a\xaf\xf0\xd8\x62\x62\x1c\xc3\x6a\x0b\x8b\x2f\xa4\x69\x16\x2b\xfd\x5f\xf1\xb4\xb5\x9c\xa6\xf8\x2a\xb6\xf0\xf4\xbc\xb2\x57\xee\xf5\x62\x1c\x9f\x17\x05\xf2\xae\xcc\x70\x0e\x7d\x30\x1b\x2e\xfa\xc8\x5a\x2e\xb6\xf0\x71\x72\xa0\x3f\x33\x26\x29\x93\x13\x6c\xcf\x82\xbb\xd8\x70\x56\x37\xd2\xf6\x53\x7d\xb2\x94\x15\x6e\x61\xf1\x80\xd2\x98\x58\xac\x9c\xfd\xa6\x22\x19\x1e\x59\x95\x23\xdf\xc2\xe2\xf7\xf7\x06\x0d\x2c\x4d\xd3\x09\xb2\x23\x55\xab\xfc\x78\x7b\x8b\xdd\x0d\x52\x37\xb5\xeb\x8a\xfa\x4a\x9a\xe3\xdb\x16\xd6\x5f\xc7\x55\x93\x9e\x3e\xbe\x9a\xb5\x54\x62\xbe\x85\xf1\x94\x25\x76\xb1\xc9\x63\x29\xd2\x03\xca\x6f\x44\x92\xa4\x2f\x81\x41\x12\xe5\x91\xe5\xc2\x0e\x54\xb2\xc3\xa1\xc2\x87\x32\xc7\x7b\xd2\x85\x54\x8e\x6a\xbf\xe3\x58\x88\x54\x18\x74\x6a\x64\x13\xab\xcc\xac\x0c\xf4\x1e\x5c\x54\xa9\x2a\x02\xf6\xf0\xf4\xbc\x9b\x50\xc6\x55\x13\xda\x6b\x90\xbb\xa5\x5b\x8c\x8a\x30\x59\x6c\x54\x7d\x2d\x96\xce\xb6\xfa\x52\x79\x44\x9a\x9c\x2d\xfb\x3a\x8c\x63\xad\x1e\xfc\x70\x4e\xb8\x5e\x4c\x4b\x89\xf5\xc4\x05\x4b\x6e\x28\xd5\x99\xec\xb0\x71\x41\x5e\x97\xcc\x4c\x58\xaf\xce\x65\x4e\x9e\x50\x33\x22\xb3\xa3\x15\xab\xd3\x64\xa7\x9f\xaf\x1f\xfb\xcc\x78\x53\xca\xe8\xfd\x70\x58\x2d\x73\x1d\x52\x39\x35\xa7\xba\xe1\x90\x5d\x25\xe0\x73\x67\xcc\x7e\xda\xb4\xe2\xe8\xc2\xe7\x2e\xd9\xdb\xaa\x41\xc6\x2e\xe4\xe4\xf3\x97\x63\xcd\x3a\x9c\x3a\xac\x4f\x57\xb0\x14\x53\xd1\x54\x65\x86\x06\xb5\x82\xaf\x9f\x30\x31\xf6\xa2\x1b\xc8\xe8\x65\x82\x7c\x8c\x45\xe3\x70\x32\x48\x85\x69\xe9\x11\xb7\x31\xe3\x09\x20\x4c\xce\xe8\xd9\xf5\x04\x9d\x3b\xf0\x0d\x0c\x0d\x42\x41\x8a\x4c\x8f\x2d\x7a\xd8\x84\xa9\x51\x3a\x4c\xd5\x00\xb9\x8d\x2b\x5f\x2c\x61\xb2\xa6\x3e\x5e\xc5\x99\x3e\x9b\x79\xa9\xda\x26\x7e\x2b\x49\xc5\x0e\x17\x8d\xd9\x17\xb6\x01\xf8\xb3\xd1\x20\x9d\x6b\xe4\x58\xac\xf4\x0d\xb4\x02\xaf\xf2\xcd\x06\x04\x4a\xa8\xf3\xb5\x92\x5f\x17\x9c\xd5\xfb\xf8\x4b\x99\xaf\x59\xb1\x2e\x33\x46\xd7\x19\xab\x1b\x46\x91\xca\x58\x81\xb2\x8a\x09\x5c\x4b\x16\xc2\xcc\x59\x32\xd7\x6e\xaa\x5c\x80\xbd\xf6\x64\x17\x04\x69\x0f\x61\x6f\x3c\xed\xc7\x11\xbb\x7c\x8c\x92\xfd\x1e\x62\x52\xc7\xc1\xda\xe9\x95\xe9\xfb\xb8\xbf\x5b\xfa\x5c\xe5\xe4\x5d\x3c\x69\xe5\xcf\x29\x99\xf8\x61\x8d\x78\x67\x33\xcd\xbf\x36\x33\x0d\x77\x36\xe1\xf9\xb2\x1c\xff\x48\x72\x33\x4f\x40\xc1\xf8\x30\x40\xc0\xf7\xfa\xd7\x72\x5a\xce\x81\x1b\xfc\x89\x63\xf1\x9c\xaa\xac\x06\x2e\x6f\x9d\x4b\x6f\xc5\x84\xc7\x02\xa3\x54\x4b\x06\xb4\x32\xfa\x0b\x6d\x5a\x69\x6b\xa4\xf8\xfa\xa8\x82\x09\x76\x04\xa7\x46\x2e\xa5\xd7\xe2\x78\x56\x3b\x2a\xad\xb0\x87\xc1\x60\x30\xc3\x7e\xab\x9f\x65\xfb\x73\xab\xcd\x45\xab\xff\x30\xe1\x53\x47\x67\xc9\xf7\x64\x40\x90\x0e\x7f\xa0\xf9\x1f\x4d\xc5\x48\x70\x80\x1c\x03\xb3\xde\x23\xf1\x8d\xd3\x59\xd3\x8e\xd3\xd9\xca\x13\xa0\x79\x06\x7c\xe8\xc9\x68\x7b\xbe\x7c\x4f\xab\x19\xf2\xfc\x12\x70\xd0\xc3\xb2\x47\xa2\x7f\x0d\x9c\x53\xe3\xd2\xf2\x9f\x0c\x8b\x16\x33\x8a\x52\xf8\xed\xd7\x38\x3c\x20\x3a\x2f\xa6\x29\xe0\xff\x9d\xe8\x2c\xdf\xae\x9d\xfd\x29\xc9\xfe\x7c\x21\x7c\xde\x3d\xfa\x77\xe4\x69\xb9\xfb\x3b\x00\x00\xff\xff\x32\xe9\x13\xc4\x66\x10\x00\x00")

func clientAppJsBytes() ([]byte, error) {
	return bindataRead(
		_clientAppJs,
		"client/app.js",
	)
}

func clientAppJs() (*asset, error) {
	bytes, err := clientAppJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/app.js", size: 4198, mode: os.FileMode(420), modTime: time.Unix(1496738851, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clientIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x58\x51\x6f\xdb\x36\x10\x7e\xcf\xaf\xe0\x84\x01\x49\xb1\x48\x72\xd1\x0d\x03\x02\x59\x6b\xd1\x6c\x40\x81\x25\x2d\x96\x6e\xc0\x9e\x06\x4a\x3c\xdb\x9c\x29\x92\x20\x69\x39\x5e\xd0\xff\x3e\x50\x14\x65\x5a\x92\x63\x7b\x19\x9a\x75\x7e\xb2\xc8\xbb\xef\xee\x3e\xf2\x4e\xa7\xcb\xbe\xba\x7e\xff\xf6\xe3\xef\x1f\x7e\x44\x0b\x53\xb1\xfc\x2c\x5b\x00\x26\xf9\x19\x42\x08\x65\x86\x1a\x06\x79\x0d\x06\x14\xe5\xb8\x28\x12\xbd\x44\x40\xa8\x11\x2a\x4b\xdd\xde\x99\x13\x64\x94\x2f\x91\x02\x36\x8d\xb4\xd9\x30\xd0\x0b\x00\x13\xa1\x85\x82\xd9\x34\x4a\xd3\x99\xe0\x46\x27\x73\x21\xe6\x0c\xb0\xa4\x3a\x29\x45\x95\x96\x5a\xff\x30\xc3\x15\x65\x9b\xe9\x2f\xa2\x10\x46\x5c\xbd\x9a\x4c\x2e\xbf\x9d\x4c\x2e\xbf\x9b\x4c\x2e\xbf\x77\xff\xa9\xc1\x8c\x96\x51\xfe\x8f\xad\xd0\x52\x70\x6f\xe6\x06\xdb\x38\x30\xfb\xe6\x5d\x29\xb8\x3e\x06\x74\x61\x8c\xd4\x57\x69\xba\xe2\x72\x39\x6f\xf0\xea\x15\xc4\x55\x8b\x93\x12\xaa\xcd\xce\x4a\x52\x6a\x8b\xeb\x80\x75\xa9\xa8\x34\x48\xab\x72\x0f\x50\xa7\x9f\xfc\xa9\xa3\x3c\x4b\x9d\x42\x7e\xa4\x76\x67\xf4\x44\x55\x7c\x4f\x85\x76\xa6\x9b\xbf\x49\x45\x79\xcf\x81\x2c\x75\x77\x20\x2b\x04\xd9\xe4\x67\x19\xa1\x35\xa2\x64\x1a\x61\x29\x3d\x6b\x15\x89\x8d\x10\xac\xc0\xca\x2d\xf8\xc5\x62\x65\x8c\xe0\xa8\x64\x58\xeb\x69\x54\x91\xd8\x1e\x40\xbb\x1a\xa1\xd7\x25\xa3\xe5\x32\xe1\xd8\xd0\x1a\xa6\x91\x11\xf3\x39\x83\x3b\x4a\xe0\x16\xd7\xd1\x16\xc8\x83\x59\xdd\xbc\x02\xbe\xca\x52\xff\xb4\x35\x96\x76\xd6\x82\xc5\xc5\xcb\xc0\x74\x73\x43\xa3\xfc\xb7\xf0\xfa\x66\xe9\xe2\x65\x1b\x42\x1a\xc6\xd0\x45\xa5\x29\x01\x8e\xeb\x00\x86\xc1\xcc\x44\xa8\xb9\x0f\x7a\xe0\x6a\x40\x44\xa8\x82\xd5\x1c\xfa\x01\x59\x16\x03\xe7\x9c\x52\x5c\x0a\x6e\x30\xe5\xa0\x7a\xe2\x2e\x9c\x57\xc3\x70\xee\xbc\x83\x82\x1b\xe0\x26\x4b\x17\xaf\x7a\x86\x52\x42\xeb\x1e\x51\xc3\xb3\x92\xf9\xcf\x94\x2f\xff\x4a\x92\x24\x4b\x65\xc0\x48\x1b\xbf\x67\x24\x74\x1a\x53\x1e\xb7\x56\xfd\x25\xf7\x14\x10\x8a\x99\x98\xc7\x52\x89\x4a\x9a\x41\x1c\x57\xde\xfb\x69\xe4\x24\x12\x17\xcb\xa8\x20\xe5\x72\x65\x62\xc9\x70\x09\x0b\xc1\x08\xa8\x4e\x29\x58\x1b\x51\xad\x31\x5b\x6d\x0d\x34\x4f\x43\xa9\xd7\x0d\xfa\x34\x12\xfc\x9d\xfd\x33\x14\x68\x8e\xd9\x61\x5c\x37\x31\x45\x3d\x26\x77\x22\xed\xb1\x60\x70\xa1\x51\x45\xe2\x19\xbd\x07\x32\xbc\xce\x06\x17\x4d\x1a\x71\x58\xeb\x08\x35\xd7\xa4\xb0\x75\xe7\xd6\x3e\x8f\x9c\x7e\x47\x46\x77\x47\x86\x42\x8d\x60\x83\x93\x5b\x18\x64\xe0\xde\x64\xa9\x5b\x18\x17\xf6\xa8\x68\x87\xe2\x8f\x1b\x09\xc8\x3a\x86\x30\x27\x48\x2a\xd0\x1a\x01\x37\xa0\x22\xf4\x7a\x09\x9b\x95\x4c\x9a\xa7\x2e\x75\x05\xbf\x85\x75\xe3\xf8\xa8\x95\xed\xaf\x8e\x2b\x41\x6c\x94\xbc\x95\xcf\x5d\x32\x5b\x17\x46\x62\x4e\xc7\x82\x1e\xa5\x86\x51\x3d\x02\x10\xee\xc6\xd4\x40\x85\xea\x78\x26\xd4\x34\xba\xb0\x0f\x97\x88\x72\x02\xf7\x2f\x10\xe5\xc8\x9d\x42\x1d\x17\x94\x93\xab\x25\x6c\xa6\x91\x95\x18\x39\x87\x1d\xe6\x6c\x0d\xa2\x7c\x26\xfe\x10\x2b\xc3\x28\x87\x91\xca\x34\xd0\xd3\x12\xf3\x1c\x3d\x3c\xa0\xc6\x9f\x4f\x9f\xb2\xb4\x59\x79\xd4\xd0\x63\x75\x14\xf9\xf8\x70\x69\xe8\x48\x59\x55\x50\x89\x1a\x2c\xd9\x17\x2e\xdc\x47\x82\x0a\x03\x0b\xac\x49\x45\x2b\xac\x36\x51\x4e\x80\x81\x39\x2a\xca\xb1\x7a\x3c\x10\xe8\x8e\x65\xcf\xd1\x0f\x0f\xd5\x95\x2f\x5c\xf4\x6e\x41\x98\x4f\x1a\x54\x4d\x4b\xd8\xc9\xa9\x3b\xbf\xf6\xf4\xbc\x6a\xa1\x9e\x96\x5a\x3a\x00\x39\x25\xc5\x5a\xe3\xa7\x64\x99\x57\xf9\xaf\x24\xda\xf6\x78\x9e\x23\xd9\xd0\xe7\xc9\xb6\x96\xf4\xff\x55\xc2\xf5\x5d\xf6\xf9\xb6\x10\x2b\xb5\x93\x6c\xef\x25\x70\xca\xe7\xc8\x6d\x8c\x67\x9c\xc1\x85\xfd\x5c\xd8\x47\x47\xb3\x1d\xdb\xb6\x73\x5f\x36\xee\x4a\x2a\xb1\x3e\xcc\xf1\x16\x34\xbf\xc6\x1b\x1f\x98\x5f\x3a\x45\xfd\xcd\xcd\x53\xb4\x3f\x1c\xaf\x1d\x08\xee\x0d\xb1\x07\x36\x9a\xb8\xbb\x5e\xb8\x3e\xfe\xb0\xb7\x4a\xac\xbb\x34\x56\x62\x1d\x66\x71\x73\xb6\x09\xc1\x1b\x1d\xa1\x36\x83\xed\xde\x11\x37\xdd\x41\x97\xc0\x58\xfe\xf0\x80\x94\x58\x5b\x94\xe6\x35\xb8\xbb\x79\x0a\xd0\x81\x72\xe8\xeb\x40\x6b\x0f\x1f\xf3\xd6\x0d\x2d\x9d\xf4\x15\x23\x24\x70\xd7\x2b\x5e\x9c\x87\x9d\xe3\xf9\x25\x3a\xc7\xd5\xb9\x27\xf1\x00\x53\xa1\xf9\x26\xf1\xed\x77\xf6\x11\x65\xa0\xd3\x3b\x54\x0e\x76\x04\x3f\x0b\xed\xf2\xd9\x68\x97\x5f\x30\xed\x27\x56\x80\xf1\xd4\xde\x0a\xec\x79\xa9\x9f\xf8\x61\x81\x66\x42\x18\x2e\xcc\x13\xbb\x20\xde\x47\x3a\xa5\x15\xfa\xa9\x55\x3c\xa5\x17\xea\x74\xfe\xcd\x66\xc8\xbe\xf9\x08\x70\xfd\xc8\xeb\xec\x70\x57\xe4\xea\xa9\x27\xe3\xc4\xe6\xe8\x99\x9a\x1c\xcf\xe6\x17\xda\xe5\x1c\x68\x73\xfc\x8a\x3e\x30\xd1\x9a\xe1\x62\xc0\x8f\xc6\x35\xbc\xe1\xe4\x57\xc9\x04\x26\xfb\x26\x59\x05\x2e\x97\x2b\x79\xcc\x2c\xab\x1d\xe1\x6c\x87\x52\x1c\x97\xcb\x02\xab\x76\x0a\xd5\x3e\x85\xa3\x89\xae\xee\x82\x96\x37\x7a\x3e\x52\x78\x83\x58\x7a\xce\x7f\xad\x60\xa6\x13\x8f\x9a\x94\x4c\x68\xb8\x78\x11\xe5\x6f\xed\x9f\x11\xdf\x02\x87\xf2\xb3\xd6\x55\x3f\x74\x24\x30\x03\xe5\x46\x8f\x58\xca\xc1\x5c\xb1\x1d\x28\xa6\xcd\xa8\xf9\xef\x00\x00\x00\xff\xff\x7b\xbb\x67\x64\x7a\x16\x00\x00")

func clientIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_clientIndexHtml,
		"client/index.html",
	)
}

func clientIndexHtml() (*asset, error) {
	bytes, err := clientIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/index.html", size: 5754, mode: os.FileMode(420), modTime: time.Unix(1496738684, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"client/app.js": clientAppJs,
	"client/index.html": clientIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"client": &bintree{nil, map[string]*bintree{
		"app.js": &bintree{clientAppJs, map[string]*bintree{}},
		"index.html": &bintree{clientIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

