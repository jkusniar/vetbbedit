// Code generated by go-bindata.
// sources:
// client/app.js
// client/index.html
// DO NOT EDIT!

package http

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clientAppJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\xcd\x6e\xe3\x36\x10\xbe\xeb\x29\x06\xda\x02\x96\x51\x5b\xc6\x5e\x6d\xf8\xd0\x62\x5b\xa0\x28\xb2\x3d\x6c\x9b\x4b\x90\x03\x23\x8d\x2c\xa2\x12\xa9\x92\x94\x92\x20\xf0\xbb\x17\x24\x25\x99\x94\xa8\x38\x6e\x0b\x94\x27\x9b\xfc\xe6\xef\x9b\xe1\x70\x14\xb7\x12\x41\x2a\x41\x33\x15\x1f\xa2\xe8\xbe\xc5\xb4\x95\x98\xdc\xb7\x78\x47\x14\x0a\x4a\xaa\xf5\x21\x8a\x76\x3b\xe8\x6a\xa0\x12\xba\x16\x81\x32\xa9\x08\xcb\x10\x08\xcb\x01\x85\xe0\x42\x9f\xd8\x1f\x02\x65\x5b\x29\x10\xa8\x5a\xc1\x30\x87\xa7\x57\x20\x2f\x94\xcb\xa8\x68\x59\xa6\x28\x67\x20\x4b\xfe\xfc\x93\xc6\x26\x5d\xbd\xb1\x52\x6b\x78\x8b\x00\x00\x68\x01\x89\xd9\x48\x05\xca\x86\x33\x89\xc3\x89\x5e\x19\x67\x92\x57\x98\x56\xfc\x34\x41\xa5\x39\x51\x64\x7d\xf8\x08\x52\x2a\xa2\x5a\xf9\x31\x6c\x89\x24\x47\xe1\x82\xbb\xda\x9c\xde\xc9\x13\x1c\x21\xe0\x83\x45\x9e\x01\x2b\x89\x5e\x34\x7f\xb5\x28\xd5\xb5\x60\x2c\x68\xc1\x5a\xcc\x38\x0c\xb6\x62\xcf\x4e\x58\xe9\xca\x70\xbc\xea\x19\x4e\x6b\x94\x92\x9c\xf0\xfd\x58\x7a\x50\xaf\x3d\x0a\xfb\x99\x71\x56\xd0\x93\x2e\x8a\x5e\x8b\x4e\xe8\x9d\x95\x4c\xd6\xd1\x39\x8a\x18\x3e\xc3\x7d\x8b\x89\x75\x0c\xab\x3d\xac\x3e\x91\xa6\x59\x6d\xcc\x7f\xcd\xd3\xde\x71\x9a\xe1\xb3\xdc\xc3\xc3\xe3\xc6\xdd\xf9\x6a\x36\xe3\xf8\xb2\x29\x51\x74\x34\xc3\x39\xf4\x9b\x3d\xf0\xd1\x25\x6f\x85\xdc\xc3\xdb\xd9\x83\xfe\xcc\xb9\x62\x5c\x4d\xb0\x3d\x0b\xfe\x66\x23\x78\xdd\x28\xd7\x4f\xbd\x14\x55\x15\xee\x61\xf5\x0d\x95\x35\xb1\xda\x78\xe7\x4d\x45\x32\x2c\x79\x95\xa3\xd8\xc3\xea\xf7\xd7\x06\x2d\x2c\x4d\xd3\x09\xb2\x23\x55\xab\xfd\x78\x79\x89\xfd\x03\x52\x37\xb5\xef\x8a\x5e\x94\xe5\xf8\xb2\x87\xed\xe7\x71\xd7\xa6\xa7\x8f\xaf\xe6\x2d\x53\x98\xef\x61\xbc\x65\x89\x5b\x6c\xaa\xa4\x32\x3d\xa1\xfa\x42\x14\x49\xfa\x12\x18\x24\x51\x95\x3c\x97\x6e\xa0\x3d\x70\x49\xd9\xa8\x50\x27\x0e\x8e\xf0\xf0\x78\x98\x44\x26\x74\xaf\x38\x1a\x90\x7f\x64\x3a\x81\x76\x24\x59\xed\x74\x19\xac\xd6\xde\xb1\x5e\xa9\x2a\x91\x25\x17\xcb\xa1\x46\xe0\x59\xab\x07\x3f\xbc\x8b\x68\x36\x53\xaa\xb0\x9e\xb8\xe0\xc8\x0d\x15\x35\x93\x1d\x0e\xae\xc8\x9b\xcc\xce\x84\xcd\xee\x5c\xe6\x1c\x08\x35\x23\x2a\x2b\x9d\x58\xbd\x5e\x38\x5d\xa1\xb6\x19\x32\x73\xd9\x73\x6a\x9f\xb3\xaf\xc3\x9d\x72\xcc\x75\xc8\xd4\xd4\x9c\x6e\x5a\x43\x76\xb5\x40\xc8\x9d\x31\xfb\x69\xd3\xca\xd2\x87\xcf\x5d\x72\x8f\x75\x1f\x8b\x7d\xc8\x39\xe4\xaf\xc0\x9a\x77\x38\x75\xd8\x5c\x82\xc5\x52\x4c\x65\x53\xd1\x0c\x2d\x6a\x03\x9f\xdf\x61\x62\x6c\x19\x37\x90\xd1\xcb\x2c\xf2\x31\x16\x8d\xc7\xc9\x20\xb5\x4c\x4b\x8f\xb8\x8d\x99\x40\x00\xcb\xe4\x8c\x9e\x7d\x9c\xa0\x4b\xa3\xbc\x81\xa1\x41\x68\x91\x22\xdb\x0a\x8b\x1e\x36\x61\x6a\x94\x5e\xa6\x6a\x80\xdc\xc6\x55\x28\x96\x65\xb2\xa6\x3e\x7e\x88\x33\x73\x37\x73\xaa\xdb\x26\x7e\xa1\xa4\xe2\xa7\xab\xc6\xdc\x77\xd5\x02\xc2\xd9\x68\x90\xcd\x35\x0a\x2c\x36\xe6\xa1\xd8\x40\x50\xf9\x6e\x07\x12\x15\xd4\xf9\x56\xcb\x6f\x0b\xc1\xeb\x63\xfc\x89\xe6\x5b\x5e\x6c\x69\xc6\xd9\x36\xe3\x75\xc3\x19\x32\x15\x6b\x50\x56\x71\x89\x5b\xc5\x97\x30\x73\x96\xec\xeb\x98\x6a\x17\xe0\x68\x3c\x39\x2c\x82\x8c\x87\x70\xb4\x9e\xf6\x53\x83\x5b\x3e\x56\xc9\xf1\x08\x31\xa9\xe3\xc5\xda\xe9\x95\x99\x67\xb3\x7f\x5b\xfa\x5c\xe5\xe4\x55\x3e\x18\xe5\x8f\x29\x99\xf8\xe1\x4c\x62\x17\x33\xcd\xbf\x36\x33\x0d\x77\x36\x88\x85\xb2\x1c\xff\x48\x72\xfb\xec\x43\xc1\xc5\xf0\xce\xc3\xf7\xe6\xd7\x7a\x5a\xce\x73\x3a\xbf\x13\x58\xc8\x07\x81\xc5\x63\xaa\xb3\x9a\x84\x0b\xc6\xe4\x32\x58\x31\xc1\x72\x77\x94\x1a\xc9\x05\xad\x9c\xfd\xc2\x9a\x56\xb9\x1a\x19\x3e\xdf\xeb\x60\x16\x3b\x82\x57\x23\xd7\xd2\xeb\x70\x3c\xab\x1d\x9d\x56\x38\xc2\x60\x70\x31\xc3\x61\xab\xef\x65\xfb\x7d\xab\xcd\x55\xab\xff\x30\xe1\x53\x47\x67\xc9\x0f\x64\x40\x92\x0e\x7f\x60\xf9\x1f\x4d\xc5\xc9\xe2\x9c\x37\x06\xe6\x7c\x36\xc4\x37\x4e\x67\x4d\x3b\x4e\x67\x9b\x40\x80\x76\x5a\x7f\x33\x93\xd1\xfe\xf2\xf8\x9e\x37\x33\xe4\x65\x60\xf7\xd0\xc3\x76\x40\xa2\x1f\xda\x2f\xa9\xf1\x69\xf9\x4f\x86\x45\x87\x19\x4d\x29\xfc\xf6\x6b\xbc\x3c\x20\x7a\x1f\x36\x53\xc0\xff\x3b\xd1\x39\xbe\x5d\xad\x06\x73\xc9\x53\xc9\x48\xf6\xe7\x13\x11\xf3\xee\xd1\x7f\xee\x9d\xd7\x87\xbf\x03\x00\x00\xff\xff\x4b\xff\x69\x02\x0d\x10\x00\x00")

func clientAppJsBytes() ([]byte, error) {
	return bindataRead(
		_clientAppJs,
		"client/app.js",
	)
}

func clientAppJs() (*asset, error) {
	bytes, err := clientAppJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/app.js", size: 4109, mode: os.FileMode(420), modTime: time.Unix(1496995136, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clientIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x58\xdd\x8e\xdc\x34\x14\xbe\xdf\xa7\x30\x16\xd2\x6e\xc5\x26\x99\x16\x10\x68\x95\x84\x56\x6d\x91\x0a\xea\x8f\xa0\x95\xe0\x0a\x39\xf1\x99\x19\x33\x8e\x6d\x6c\x27\xb3\xa3\x55\x1f\xa6\xcf\x82\x78\x2f\xe4\x38\xce\x24\x33\xd9\xce\x0c\x8b\x5a\xca\x5c\xc5\xf6\x39\xdf\xf9\xb1\xbf\xe3\x33\x4e\x3f\x7b\xf2\xf2\xf1\xeb\x5f\x5f\x3d\x45\x4b\x5b\xf1\xfc\x2c\x5d\x02\xa1\xf9\x19\x42\x08\xa5\x15\x58\x82\xca\x25\xd1\x06\x6c\x86\x6b\x3b\x8f\xbe\xc5\xc3\xa5\xa5\xb5\x2a\x82\x3f\x6a\xd6\x64\xf8\x97\xe8\xcd\xa3\xe8\xb1\xac\x14\xb1\xac\xe0\x80\x51\x29\x85\x05\x61\x33\xfc\xec\x69\x06\x74\x01\x23\x4d\x41\x2a\xc8\x30\x05\x53\x6a\xa6\x2c\x93\x62\x20\xdf\x80\x05\xcd\x04\x29\x8a\xd8\xac\x10\x50\x66\xa5\x9e\x50\x26\xb5\x5d\x4a\x3d\xd0\xfb\xe1\xcf\x77\x02\xfd\x58\xff\xf5\x4e\x30\x32\xa5\xd0\x30\x58\x2b\xa9\xed\x40\x65\xcd\xa8\x5d\x66\x14\x1a\x56\x42\xd4\x0e\x2e\x11\x13\xcc\x32\xc2\x23\x53\x12\x0e\xd9\xfd\x78\x76\x89\x2a\x26\x58\x55\x57\xdb\xa9\x80\x6e\x99\xe5\x90\x4f\x39\x9c\x26\x7e\xed\xcc\x0b\x72\x26\x56\x48\x03\xcf\xb0\xb1\x1b\x0e\x66\x09\x60\x31\x5a\x6a\x98\x67\x38\x49\xe6\x52\x58\x13\x2f\xa4\x5c\x70\x20\x8a\x99\xb8\x94\x55\x52\x1a\xf3\xdd\x9c\x54\x8c\x6f\xb2\x9f\x64\x21\xad\xbc\xfa\x72\x36\xbb\xfc\x6a\x36\xbb\xfc\x7a\x36\xbb\xfc\xc6\x7f\x33\x4b\x38\x2b\x83\x3b\xff\xc0\x0a\x2b\xa5\x08\x66\x9e\x13\x17\x07\xe1\x5f\x3c\x2b\xa5\x30\xc7\x80\xba\x03\x60\xae\x92\xa4\x16\x6a\xb5\x68\xf1\x9a\x1a\xa2\xaa\xc3\x49\x28\x33\x76\x34\x13\x97\xc6\xe1\x7a\x60\xbf\xf7\xc8\xe8\xf2\x16\xa0\x5e\x3f\xfe\xdd\xe0\x3c\x4d\xbc\x42\x7e\xa4\x76\x6f\xf4\x44\x55\x72\xcd\xa4\xf1\xa6\xdb\xcf\xb8\x62\x62\xc7\x81\x34\xf1\x24\x49\x0b\x49\x37\xf9\x59\x4a\x59\x83\x18\xcd\x30\x51\xaa\x3f\x77\x34\xb2\x52\xf2\x82\x68\x54\x72\x62\x4c\x86\x2b\x1a\x51\x10\x26\xf0\xa0\x95\x5a\x3e\x18\xac\xb6\x07\x06\xa3\x36\xcb\x19\x9e\x73\xb8\xbe\x42\xf7\xf1\xf8\x74\xa5\xc9\xf2\xc1\x40\xbf\xa2\x51\x51\x5b\x2b\xc5\x00\xc6\xed\x68\x37\x8b\xd1\xc3\x92\xb3\x72\x15\x0b\x62\x59\x03\x19\x36\xa4\x81\x47\x82\xbe\x51\x5c\x12\x3a\x70\x24\x80\x39\xdd\xbc\x20\xe5\xaa\x56\x69\x12\xc6\x5b\x73\x49\x6f\xaf\x8b\x32\xd9\x86\xd9\xcd\xb8\x54\x04\x5f\x08\x13\x51\x47\xb5\xb0\xe9\xc1\x10\x65\x84\xcb\x45\xa4\xb4\xac\x94\x1d\xb9\xe1\x7e\x57\x21\x1b\x19\xf6\x12\xb1\xcf\xcd\xa4\x20\x13\xaa\xb6\x91\xe2\xa4\x84\xa5\xe4\x14\x74\xaf\x34\x98\x9b\x50\x6d\x08\xaf\xb7\x06\xda\xd1\xbe\xd4\xc3\x16\x3d\xc3\x52\x3c\x73\x1f\xfb\x02\x2d\x0d\x3c\xc6\x93\x36\x26\xbc\x93\xaf\x51\xa4\x3b\x59\xb0\xa4\x30\xa8\xa2\xd1\x9c\x5d\x03\xdd\xdf\x0d\x4b\x8a\xf6\x58\x09\x58\x1b\xec\xe4\x38\x29\x1c\x0f\x5f\xb8\x71\xbe\xe7\x4a\xda\x27\xc3\x25\x9d\x30\x01\x7a\x5f\xa8\x15\x6c\x71\x72\x07\x83\x2c\x5c\xdb\x34\xf1\x13\xd3\xc2\x01\x15\x8d\x52\xfc\x7a\xa3\x00\x39\xc7\x10\x11\x14\x29\x0d\xc6\x20\x10\x16\x34\x46\x0f\x57\xb0\xa9\x55\xdc\x8e\xfa\x93\x27\xc5\x0b\x58\xb7\x8e\x4f\x5a\xd9\xfe\x9a\xa8\x92\xd4\x45\x29\x3a\xf9\xdc\x9f\x44\xe7\xc2\x44\xcc\xc9\x54\xd0\x93\xa9\xe1\xcc\x4c\x00\x0c\x57\x23\x66\xa1\x42\x4d\x34\x97\x3a\xc3\x17\x6e\xe0\x6e\x03\x0a\xd7\xf7\x10\x13\xc8\xef\x42\x13\x15\x4c\xd0\xab\x15\x6c\x32\xec\x24\x26\xf6\x61\x94\x39\x47\x20\x26\xe6\xf2\x37\x59\x5b\xce\x04\x4c\xd0\x6a\x4f\xcf\x28\x22\x72\x74\x73\x83\x5a\x7f\xde\xbe\x4d\x93\x76\xe6\xbd\x86\xde\x57\x06\x50\x88\x8f\x94\xfe\xaa\xdd\xa9\x0a\x1a\x2a\xd9\x80\x4b\xf6\x85\x0f\xf7\x3d\x41\x0d\x03\x1b\x58\x53\x9a\x55\x44\x6f\x70\x4e\x81\x83\x3d\x2a\xca\xdd\x62\x32\x29\xd0\x6f\xcb\x2d\x5b\xbf\xbf\xa9\xbe\x26\x91\x62\xe7\x14\x0c\xf9\x64\x40\xbb\x0b\x7f\xc4\xa9\x9f\xc3\xdc\xdd\x79\xd5\x41\xdd\x8d\x5a\x66\x00\x72\x0a\xc5\x3a\xe3\xa7\xb0\x2c\xa8\xfc\x57\x88\xb6\xdd\x9e\x8f\x41\x36\xf4\x61\xd8\xd6\x25\xfd\x7f\x45\xb8\x5d\x97\x03\xdf\x96\xb2\xd6\x23\xb2\xbd\x54\x20\x98\x58\x20\xbf\x30\xcd\x38\x4b\x0a\xd7\x3e\xdf\x96\x8e\x76\x39\x72\x6d\xd8\x6d\x6c\x1c\x4b\x6a\xb9\x3e\x9c\xe3\x2d\x68\xfe\x84\x6c\x42\x60\x61\xea\x14\xf5\x47\xcf\xef\xa2\xfd\xea\x78\xed\x81\xe0\xad\x21\xee\x80\x4d\x12\x77\xec\x85\xef\x6b\x0f\x7b\xab\xe5\xba\xa7\xb1\x96\xeb\x21\x8b\xdb\xbd\x8d\x29\xd9\x18\x8c\x3a\x06\xbb\xb5\x23\x4e\xba\x87\x2e\x81\xf3\xfc\xe6\x06\x69\xb9\x76\x28\xed\x35\x38\x5e\x3c\x05\xe8\x40\x39\x0c\x75\xa0\xb3\x47\x8e\xb9\x75\x87\x96\x4e\x6a\xc2\xa5\x02\xe1\x7b\xc5\x8b\xf3\x61\xe7\x78\x7e\x89\xce\x49\x75\x1e\x92\x78\x20\x53\x43\xf3\x2d\xf1\xdd\xff\xce\x23\xca\x40\xaf\x77\xa8\x1c\x8c\x04\x3f\x48\xda\xd5\x47\x4b\xbb\xfa\x84\xd3\x7e\x62\x05\x98\xa6\xf6\x56\xe0\x96\x4b\xfd\xc4\x3f\x16\x68\x2e\xa5\x15\xd2\xde\xb1\x0b\x12\xbb\x48\xa7\xb4\x42\xdf\x77\x8a\xa7\xf4\x42\xbd\xce\xbf\xd9\x0c\xa1\xf0\xd7\xff\x2e\x5d\x91\xaf\xa7\x21\x19\x27\x36\x47\x1f\xa9\xc9\x09\xd9\xfc\x44\xbb\x9c\x03\x6d\x4e\x98\x31\xe1\x31\x84\xb2\x26\xbc\x6d\x55\x34\x32\x82\x94\xab\x82\x68\xff\x44\x10\x46\xc3\xe7\x81\xbe\xf6\x81\x51\xcf\xcd\x62\xa2\xf8\x0d\xb6\x61\x27\xc1\x9f\x6b\x98\x9b\x38\xa0\xc6\x25\x97\x06\x2e\xee\xe1\xfc\xb1\xfb\x98\x7e\xa8\x09\xc2\xf9\x59\xe7\x6a\x78\x08\xa3\x30\x07\xed\x9f\xc3\x88\x52\x7b\x6f\x5d\xdd\x23\x57\xd2\xbe\x0f\xff\x1d\x00\x00\xff\xff\xac\x20\xbf\xa7\x2f\x16\x00\x00")

func clientIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_clientIndexHtml,
		"client/index.html",
	)
}

func clientIndexHtml() (*asset, error) {
	bytes, err := clientIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/index.html", size: 5679, mode: os.FileMode(420), modTime: time.Unix(1496996225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"client/app.js": clientAppJs,
	"client/index.html": clientIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"client": &bintree{nil, map[string]*bintree{
		"app.js": &bintree{clientAppJs, map[string]*bintree{}},
		"index.html": &bintree{clientIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

