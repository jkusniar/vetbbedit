// Code generated by go-bindata.
// sources:
// client/app.js
// client/index.html
// DO NOT EDIT!

package http

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clientAppJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcd\x41\x6a\xc6\x20\x10\x05\xe0\xbd\xa7\x98\xa6\x05\x15\x8a\x07\xd0\x0b\x74\xd3\x6e\x0a\xd9\x4b\xf2\x62\x04\xab\x41\xc7\x76\x51\x72\xf7\xd2\x08\x3f\x99\xdd\xf0\xbe\xc7\x9b\x7a\x03\x35\xae\x71\xe1\xc9\x09\x31\x77\x98\xde\xa0\xe6\x8e\x77\xcf\xa8\xd1\x27\xed\x84\xc8\xf8\xa1\xb9\x43\xfd\x0a\x22\x22\x24\x4b\xf2\xd9\x1f\x87\x7c\xbd\xfe\xd5\xb3\xb7\x34\xb2\xff\x0b\x15\xe0\x98\x83\x25\xf9\x86\x94\x4a\x7f\x92\x57\x76\x0e\xfe\x05\xde\xcb\xda\xee\x0d\x2e\x21\x24\x7c\xc6\x15\x1f\xfe\xdb\xd2\xd6\xf3\xc2\xb1\x64\xa5\x6f\xe6\x72\x7b\x6c\xe6\xa5\x62\x6b\xa6\x0d\x6c\x46\x55\x69\xf7\x80\xe7\x18\x13\xa7\x76\x7f\x01\x00\x00\xff\xff\x32\x75\x0f\xaa\xde\x00\x00\x00")

func clientAppJsBytes() ([]byte, error) {
	return bindataRead(
		_clientAppJs,
		"client/app.js",
	)
}

func clientAppJs() (*asset, error) {
	bytes, err := clientAppJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/app.js", size: 222, mode: os.FileMode(420), modTime: time.Unix(1494934642, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clientIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x4b\x8b\xdb\x3c\x14\xdd\xe7\x57\xe8\xd3\xf6\x4b\x2c\x33\x69\x29\x0c\xb2\x5b\x68\x67\x51\xe8\x8b\x4e\x37\x5d\xca\xd2\x8d\x7d\x1b\x59\x12\xd2\x8d\x21\x1d\xe6\xbf\x97\xf8\x91\x68\x32\x14\x86\xae\x94\xdc\xe8\x3c\xee\xd1\x21\xf2\xbf\x0f\x5f\xdf\xff\xf8\xf9\xed\x8e\x75\xd4\xdb\x7a\x25\x97\x03\x94\xa9\x57\x8c\x31\x26\x09\xc9\x42\x3d\x00\x41\x44\xa7\x9a\xa6\x48\x7b\x06\x06\xc9\x47\x29\xa6\xdf\xa6\x7b\x16\xdd\x9e\x45\xb0\x15\x4f\x74\xb4\x90\x3a\x00\xe2\xac\x8b\xb0\xab\xb8\x10\x3b\xef\x28\x15\xad\xf7\xad\x05\x15\x30\x15\xda\xf7\x42\xa7\xf4\x76\xa7\x7a\xb4\xc7\xea\xbb\x6f\x3c\xf9\xdb\x6d\x59\xae\x5f\x95\xe5\xfa\x75\x59\xae\xdf\x4c\x9f\x91\x94\x45\xcd\xff\x5d\x05\xb5\x77\x8b\xcc\x67\x75\x5a\x43\xd9\xff\x3f\x6a\xef\xd2\x4b\x48\x3b\xa2\x90\x6e\x85\x38\xb8\xb0\x6f\x47\xbe\xe1\x00\x9b\x7e\xe6\x11\x06\x13\x3d\x99\x14\x3a\x9d\x79\x93\x8e\x18\x88\xa5\xa8\xff\xc2\x73\x86\x17\xbf\x12\xaf\xa5\x98\x00\x2f\x45\x9f\x35\x73\xa8\x14\xd3\xdb\xc9\xc6\x9b\x63\xbd\x92\x06\x07\x86\xa6\xe2\x2a\x84\xc5\x56\x6f\x36\xe4\xbd\x6d\x54\x9c\x06\xcb\xb0\x39\x10\x79\xc7\xb4\x55\x29\x55\xbc\x37\x9b\x53\x72\xf3\x94\xb3\x77\xda\xa2\xde\x17\x4e\x11\x0e\x50\x71\xf2\x6d\x6b\xe1\x1e\x0d\x7c\x51\x03\xbf\x10\x2d\x64\x27\x6c\xdd\x83\x3b\x48\xb1\x7c\xbb\x88\x89\xb3\x5a\xbd\xba\x4c\xbb\x9b\x4c\x7b\xac\x16\xaf\xef\xe6\xa6\x75\x37\xb3\x79\x91\xbb\x3f\xef\x93\xd0\x80\x53\x43\x86\xb7\xb0\x23\xce\xc6\x27\x4c\xcf\x4c\x66\x11\xe4\x10\x15\x5b\xb8\x5e\xe5\x94\x5f\xe6\x6a\x02\x6d\xb4\x77\xa4\xd0\x41\xbc\xba\x3e\xed\xb1\x7d\xbe\xc7\xfd\x62\xd0\x3b\x02\x47\x52\x74\xdb\x2b\x21\x61\x70\xb8\x8a\xe8\xe9\x9e\xe3\x38\xd4\x9f\xd0\xed\x7f\x17\x45\x21\x45\xc8\x22\x99\x03\x58\x22\xc9\x5d\x2b\x74\x9b\x59\x36\x8f\x20\xd4\x0f\x0f\xac\x8d\x00\x84\xae\x65\x8f\x8f\x19\xdf\xe8\x64\x39\xe6\x1a\x1a\xd8\x41\x9c\xca\xa8\x42\xb8\xea\xab\x14\x73\xdb\xc4\xf8\xff\xf1\x27\x00\x00\xff\xff\xd3\xd2\xf9\x7e\x56\x04\x00\x00")

func clientIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_clientIndexHtml,
		"client/index.html",
	)
}

func clientIndexHtml() (*asset, error) {
	bytes, err := clientIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/index.html", size: 1110, mode: os.FileMode(420), modTime: time.Unix(1494934639, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"client/app.js": clientAppJs,
	"client/index.html": clientIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"client": &bintree{nil, map[string]*bintree{
		"app.js": &bintree{clientAppJs, map[string]*bintree{}},
		"index.html": &bintree{clientIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

