// Code generated by go-bindata.
// sources:
// client/app.js
// client/index.html
// DO NOT EDIT!

package http

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clientAppJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x54\x3d\x8f\xdb\x30\x0c\xdd\xfd\x2b\x08\xb7\x80\x6d\x20\x50\xd0\x35\x41\x86\x0e\x1d\x8a\x22\xe9\x50\x34\xcb\xe1\x06\x9d\xcd\xd8\x42\x6d\xc9\x15\x25\xe7\x8a\x43\xfe\x7b\x21\x7f\x24\x72\x4e\xe9\xe5\xa6\x6a\x4a\xc4\x27\xbe\x47\xfa\x91\xb1\x25\x04\x32\x5a\xe4\x26\x5e\x47\xd1\xde\x22\xb3\x84\xe9\xde\xe2\x96\x1b\xd4\x82\xd7\xd9\x3a\x8a\x96\x4b\xe8\x1a\x10\x04\x9d\x45\x10\x92\x0c\x97\x39\x02\x97\x05\xa0\xd6\x4a\xbb\xc8\xf0\x43\x23\xd9\xda\x80\x46\x63\xb5\xc4\x02\x9e\xfe\x00\x7f\x16\x8a\xa2\x83\x95\xb9\x11\x4a\x02\x55\xea\xf8\xc5\x61\xd3\xae\x59\x0c\xaf\x32\x78\x89\x00\x00\xc4\x01\xd2\xfe\x82\x69\xa4\x56\x49\xc2\x29\xe2\x4e\xae\x24\xa9\x1a\x59\xad\xca\x2b\x14\x2b\xb8\xe1\xd9\xfa\x1e\x24\x19\x6e\x2c\xdd\x87\xad\x90\x17\xa8\x7d\x70\xd7\xf4\xd1\x2d\x95\xb0\x81\x80\x86\x01\x79\x02\xac\x09\x67\xd5\xfc\xb6\x48\xe6\xad\x62\x06\xd0\x0d\xb6\x58\x2a\x98\xb8\xe2\x19\x4f\x38\x69\xd2\xf7\x38\x19\x3b\xcc\x1a\x24\xe2\x25\xfe\xbb\x96\x11\x34\x66\x8f\xc2\x3a\x73\x25\x0f\xa2\x74\xa6\x18\xb3\xb8\x0f\xba\x1d\x5e\xa6\x59\x74\x8a\x22\x89\x47\xd8\x5b\x4c\x07\x61\x58\xaf\x20\xf9\xc0\xdb\x36\x59\xf4\xff\x5d\x9f\x56\x9e\x68\x89\x47\x5a\xc1\xc3\xe3\xc2\xbf\xd9\xf5\x97\x71\x7c\xb9\x1c\xb5\xba\xcb\x41\xde\x10\x6a\x94\x95\x06\x8b\x15\x9c\xfd\x95\xfa\x6d\x36\x95\x20\x56\xa2\x71\xf9\xd2\xb1\xf8\xe9\x25\x9a\x4a\x15\xe4\x4b\x31\xaa\x2c\x6b\xfc\x21\x0a\xdc\xf1\xee\x56\xca\x73\xda\x8f\x1a\x0f\xc4\x68\x40\xb3\xe1\x6d\xea\x35\xf8\x74\x11\x3f\x2a\x78\x33\xa5\xeb\x05\x6c\xe0\xe1\x71\x3d\x8b\x75\x5c\xbb\xf1\xdb\xf4\xa0\x79\xa8\x1f\x2e\x57\x61\x9a\x2c\xdd\xeb\x24\x9b\x85\xdd\x61\xa6\x42\x99\x5e\x98\x43\xb3\x35\x63\x6b\x26\x1d\x33\x6f\x33\x61\xb0\xb9\x62\xef\xcb\x0c\x30\xe6\xdc\xe4\x95\x47\x39\x9b\xf2\xeb\x13\x5a\x08\x21\x9a\x60\x67\x95\xdc\x4d\x6e\xf1\xe8\x3a\x94\xe6\x9a\xce\x8d\xe3\xd4\x64\xf7\x20\x24\xe7\xfc\x11\x58\x6b\xa9\x9a\xc3\x5f\x4b\xf2\xc3\x6e\x42\xe3\x39\xe4\x14\xd2\xab\xb1\x51\x1d\x7e\x35\xd8\xf8\x82\x85\x2c\xf0\xf9\xa6\x23\x18\xb5\xb5\xc8\x71\x40\x2d\xe0\x53\xb8\x13\xc4\x3b\xfc\x2c\x8b\x9f\x6d\xad\xf8\xcd\x79\x38\xe7\xf5\x16\x4b\xfc\x4e\xb3\xb5\xf6\x6c\xb6\x05\xbc\xf4\xae\x58\x5d\xc4\x86\xec\xf0\x7e\x03\x7a\xf2\x5c\x5d\xf0\xfd\x5b\xfc\xba\xff\x10\xda\x3f\xd7\x80\xff\x6b\x4f\x4f\xdb\xbd\xfb\x44\xf2\xfc\xd7\x13\xd7\x4c\xb5\x28\x67\xeb\x64\xdc\xca\xa7\x6c\xfd\x37\x00\x00\xff\xff\x5b\xf5\x70\xac\xb4\x07\x00\x00")

func clientAppJsBytes() ([]byte, error) {
	return bindataRead(
		_clientAppJs,
		"client/app.js",
	)
}

func clientAppJs() (*asset, error) {
	bytes, err := clientAppJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/app.js", size: 1972, mode: os.FileMode(420), modTime: time.Unix(1495460735, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clientIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x5f\x6f\xe4\x34\x10\x7f\xef\xa7\x30\x16\x0f\x3d\xd1\xc4\x7b\x2a\x08\xa9\xca\x86\x43\x07\x0f\x27\x71\x3d\x44\x0f\x24\x9e\x90\x63\x4f\x36\xc3\x3a\xb6\x65\x3b\xb9\x2e\xd5\x7d\x77\xe4\x38\xd9\xa6\x9b\x6c\xaf\xb0\x4f\xf1\xd8\xf3\x9b\xf9\xcd\xdf\x2d\xbe\xfa\xe9\xc3\xdb\x8f\x7f\xfe\xfa\x33\x69\x42\xab\xca\x8b\xa2\x01\x2e\xcb\x0b\x42\x08\x29\x02\x06\x05\x65\x0f\x01\x1c\x6a\x5e\x55\xb9\xdf\x13\x90\x18\x8c\x2b\x58\xba\xbb\x48\x0f\x15\xea\x3d\x71\xa0\xb6\xd4\x87\x83\x02\xdf\x00\x04\x4a\x1a\x07\xf5\x96\x32\x56\x1b\x1d\x7c\xbe\x33\x66\xa7\x80\x5b\xf4\xb9\x30\x2d\x13\xde\xff\x50\xf3\x16\xd5\x61\xfb\x9b\xa9\x4c\x30\x37\xd7\x9b\xcd\xd5\xb7\x9b\xcd\xd5\x77\x9b\xcd\xd5\xf7\xe9\x1b\x03\x57\x28\x68\xf9\xbf\xad\xa0\x30\x7a\x32\xf3\x9e\x47\x1e\x5c\x7d\xf3\x4e\x18\xed\x5f\x02\xda\x84\x60\xfd\x0d\x63\x9d\xb6\xfb\xdd\x80\xd7\x77\x90\xb5\x23\x0e\x93\xe8\xc3\x13\x49\x2e\x7c\xc4\x4d\xc0\x5e\x38\xb4\x81\x78\x27\xce\x00\x1d\xf5\xf3\xbf\x3d\x2d\x0b\x96\x14\xca\x17\x6a\x1f\x8d\xfe\x47\x55\x7e\x8f\xc6\x27\xd3\xc3\x67\xde\xa2\x3e\x71\xa0\x60\xa9\x06\x8a\xca\xc8\x43\x79\x51\x48\xec\x09\xca\x2d\xe5\xd6\x4e\x51\x6b\x65\x16\x8c\x51\x15\x77\x49\x30\x09\xab\x2e\x04\xa3\x89\x50\xdc\xfb\x2d\x6d\x65\x16\x13\x30\x4a\x29\x79\x23\x14\x8a\x7d\xae\x79\xc0\x1e\xb6\x34\x98\xdd\x4e\xc1\x1d\x4a\xb8\xe5\x3d\x7d\x04\x9a\xc0\xa2\x6e\xd9\x82\xee\x0a\x36\x9d\x1e\x8d\xb1\xa3\xb5\x99\xb0\x79\x3d\x33\x3d\x54\x28\x2d\xff\x98\x97\x6f\xc1\x9a\xd7\x23\x05\x36\xe7\x70\x64\xe5\x51\x82\xe6\xfd\x0c\x46\x41\x1d\x28\x19\xea\xc1\x2f\x5c\x9d\x05\x62\xae\xc2\xdd\x0e\x4e\x09\xc5\x28\xce\x9c\x4b\x4a\x99\x30\x3a\x70\xd4\xe0\x4e\x9e\x27\x3a\xd7\x4b\x3a\x77\x93\x83\x46\x07\xd0\xa1\x60\xcd\xf5\x89\x21\x26\xb1\x3f\x09\xd4\x32\x57\xb6\xfc\x05\xf5\xfe\x9f\x3c\xcf\x0b\x66\x67\x11\x19\xf9\x4f\x11\x99\x3b\xcd\x51\x67\xa3\xd5\xd3\x08\xf0\xca\x93\x56\x66\x35\xde\x83\x5c\xe6\x31\xf0\x6a\xa8\x1f\x0d\x9f\x3c\x25\x43\x7c\xaa\xd8\x70\xb7\xf1\xbc\x42\x3b\x26\x5b\xdb\x2e\x3c\x06\x67\xf9\x28\xf5\x6e\xc4\x29\x23\x0c\x09\x70\x1f\x0a\x96\x04\xeb\x8f\x27\x54\x62\x15\x17\xd0\x18\x25\xc1\x6d\xe9\xc7\x83\x05\x12\x1d\x23\x5c\x4b\x62\x1d\x78\x4f\x40\x07\x70\x94\xbc\xd9\xc3\xa1\xb3\xf9\x70\x3a\xd6\xac\xd1\xb7\xf0\x69\x70\x7c\xd5\xca\xe3\xaf\xcf\x5a\x23\x23\x4b\x3d\xbe\x2f\x53\x15\x47\x17\x56\x38\xb3\x35\xd2\xab\xa1\x51\xe8\x57\x00\xe6\xb7\x19\x06\x68\x49\x9f\xd5\xc6\x6d\xe9\x65\x3c\x5c\x11\xd4\x12\xee\x5f\x11\xd4\x24\x65\xa1\xcf\x2a\xd4\xf2\x66\x0f\x87\x2d\x8d\x2f\x56\xf2\xf0\x24\x72\xb1\xf9\x50\xd7\xe6\x2f\xd3\x05\x85\x1a\x56\x5a\x72\xa1\xe7\x2d\xd7\x25\x79\x78\x20\x83\x3f\x9f\x3f\x17\x6c\x90\x3c\x6b\xe8\xb9\x01\x42\x26\x7e\x5c\x04\x5c\x99\x27\x0e\x5a\xd3\xc3\xbb\x00\xed\x65\xa2\xfb\x0c\xa9\x39\xb1\x99\x35\xeb\xb0\xe5\xee\x40\x4b\x09\x0a\xc2\x8b\x58\xae\x0d\xa2\xc5\x83\x63\x5a\xce\xa4\x7e\x99\xd4\xd4\xb7\xbc\x3a\xa9\x82\x79\x3f\x79\x70\x3d\x0a\x78\xd2\x53\x77\x93\xec\x1c\xda\x39\xb0\xc6\x74\xee\x09\xd2\x07\x0b\x1a\xf5\x8e\xa4\x8b\x2f\xc1\x4d\x12\xff\x85\x7d\x50\xf3\x6a\x91\x37\xcf\x7b\xf8\x51\xcb\xdf\xad\x32\x5c\x9e\xdb\x03\x15\x17\xfb\xce\xbe\x64\x13\x8c\x03\xf0\x71\xa4\x6b\x2e\xf6\x71\x40\xa7\x19\x3e\x9e\xe6\x23\x6c\x28\xcb\x87\x07\xe2\xc0\xdb\xf7\x7e\xb7\x52\xaa\x33\x2e\x27\xce\x7f\xed\xa0\xf6\xf9\x84\x9a\x0b\x65\x3c\x5c\xbe\xa2\xe5\xdb\xf8\xb1\xe2\xdb\xcc\xa1\xb8\x69\x07\x57\xa7\x95\x2d\xa1\x06\x97\x16\x37\xb7\x76\xb1\x95\xc7\x75\xcc\x86\x3f\x6a\xff\x06\x00\x00\xff\xff\x33\xae\xe6\x60\xb8\x09\x00\x00")

func clientIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_clientIndexHtml,
		"client/index.html",
	)
}

func clientIndexHtml() (*asset, error) {
	bytes, err := clientIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/index.html", size: 2488, mode: os.FileMode(420), modTime: time.Unix(1495460735, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"client/app.js": clientAppJs,
	"client/index.html": clientIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"client": &bintree{nil, map[string]*bintree{
		"app.js": &bintree{clientAppJs, map[string]*bintree{}},
		"index.html": &bintree{clientIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

