// Code generated by go-bindata.
// sources:
// client/app.js
// client/index.html
// DO NOT EDIT!

package http

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clientAppJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\xcd\x6e\xdb\xb8\x13\xbf\xfb\x29\x06\x6a\x01\xd9\xf8\xdb\x32\x72\x2b\x64\xf8\xd0\x36\xfd\x63\x8b\x45\xe2\x22\xfd\x00\xb6\x41\x0e\x8c\x34\xb6\x89\x48\xa4\x96\xa4\x94\xa4\x85\xef\x7b\xe9\x43\xf4\xb0\x87\x3d\xec\x2b\xf4\xd2\xe6\xbd\x16\xa4\x28\x59\x92\x29\xdb\xd9\xae\x0f\x89\xcc\xf9\x0d\xe7\xeb\xc7\xe1\xc8\x5e\x2e\x11\xa4\x12\x34\x52\xde\x6c\x30\xf8\x90\x63\x90\x4b\x1c\x7e\xc8\xf1\x8c\x28\x14\x94\x24\xa3\x59\x73\xf5\xf5\xc9\x33\x36\x9a\x0d\x06\x05\x11\x40\x4f\x9e\x31\x98\x03\xc3\x5b\xb0\x92\xe1\xe7\x01\x00\x40\xc2\x23\x92\x60\x08\xbe\xbc\xf1\xc7\x00\xd3\x29\xbc\x5b\x9c\x2e\x42\x90\xa8\xac\x0c\x96\x82\xa7\x10\x25\x14\x99\x32\x2a\x29\x4a\x49\x56\x28\x43\x28\xb7\xd0\x1f\x64\xcd\x6f\x0d\x54\x77\x59\x7f\x18\xde\xca\x10\xfc\x73\xbc\x95\xfe\xd8\x29\x7d\x87\x77\xca\x22\x40\xe1\x9d\xea\x81\xbd\x49\x48\x84\x6b\x9e\xc4\x28\x42\xf0\xdf\xdd\x67\x68\x96\x81\xb0\x18\x32\x81\x52\x02\x32\x85\xc2\xa1\x2d\x51\x14\x34\xd2\x31\xf8\x6f\xed\x63\x3f\xca\x7a\x63\x81\x7d\x0e\x59\xb0\xc3\x27\x2b\x39\xc2\xad\x35\xcf\x85\xf6\x69\x91\x21\xa3\x6c\x55\x7e\x77\xe0\x62\x72\x1f\x82\x7f\x4a\xee\x1d\x32\x92\x86\xe0\x3f\x3f\x73\x48\x32\x2d\x79\xe3\x92\x2c\x39\x57\x8c\x2b\xdc\xe6\xbd\x5e\xea\x0b\xb7\x92\x3b\xe2\xad\x55\x0f\x07\x1c\x25\x5c\xe2\x0b\xc5\x42\xf0\x5f\xea\x47\x57\x5e\x49\x81\xf1\xe2\x46\x17\x40\x3f\xc1\xe2\x57\x07\x08\x85\x38\xe7\x17\x28\x33\xce\xa4\x66\xf3\xab\x8b\x8b\xc5\x45\x08\xe7\x1c\x84\x5d\xf4\x5b\x3a\x9b\xfa\xdb\x66\xbb\x99\xbc\x79\x3c\x89\x17\x9f\x18\x49\x5d\x65\x68\xd0\x58\xff\x03\xae\x81\xf9\x51\x44\x3e\x27\xd9\xf7\xbf\x1f\xbe\x96\x2a\x40\x40\xaa\x84\xfc\xf8\x72\x14\x97\x93\xfc\xe1\xdb\xb5\xcb\x9d\x36\x95\x3f\x32\x64\x14\x41\x1e\x82\xbb\xfd\x2a\xd5\xf2\xc3\x9e\xd5\x74\x16\x31\x65\xe4\xc7\x17\xf6\xfd\x2f\x58\xf3\x98\x32\x97\x49\xcb\x69\x7c\xf8\xa3\x8f\xd4\xa7\x9c\x5f\x63\xec\xca\x61\xc9\x6c\x23\x76\x51\xa8\x43\x6f\x53\x8f\x8c\x7f\x62\xdf\xbf\xa6\x37\x2e\x57\xdc\xdc\xae\xc2\xaf\x34\x8f\x48\x40\x83\xde\x1f\x89\x2a\xb8\xa0\x0f\x7f\xee\xa5\xf8\xfb\x84\x3f\x7c\x43\x9d\xa7\xa3\x68\xfe\xf2\x97\xdf\x5e\x3c\x0f\x4d\xb5\x50\x00\x43\x1e\x67\xbc\xc0\x98\x24\xbd\x6c\x1f\x94\x7f\x37\xfa\x62\x18\x4c\xa7\x50\xa4\x40\x25\x14\x39\x02\x65\x52\x11\x66\xdb\x14\x0a\xc1\x85\x96\x94\x0f\x02\x65\x9e\x28\x10\xa8\x72\xc1\x30\x86\xeb\x7b\x20\x77\x94\xcb\xc1\x32\x67\x91\xa2\x9c\x81\x5c\xf3\xdb\x57\x1a\x3b\x2c\xd2\x71\xa9\x35\xb2\xa7\x86\x2e\x61\x68\x16\x82\xea\x2c\x8e\x1a\xe7\x29\xe2\x4c\xf2\x04\x83\x84\xaf\x3a\xa8\x20\x26\x8a\x8c\x66\xc7\x20\xa5\x22\x2a\x97\xc7\x61\xd7\x48\x62\x14\x4d\x70\x91\x1a\xe9\x99\x5c\xc1\x1c\x1c\x3e\x94\xc8\x0d\x60\x22\xb1\x15\xcd\xef\x39\x4a\x75\x28\x98\x12\xd4\x63\xad\x48\x83\xa7\x6a\xe8\xd9\x3e\x13\xb4\xea\xeb\x8d\x5a\x86\xdd\x56\x7c\x93\x74\xdf\xa6\x3c\xb0\x1b\xed\x0f\xce\x82\xec\xee\x03\xb7\xe3\x11\x67\x4b\xba\xd2\x34\xb1\xbb\xe8\x0a\x9f\x95\x9a\xc3\xd1\x60\x33\x18\xd8\x61\xc2\x0e\x12\x98\x84\xe0\x3f\x21\x59\x66\x69\xab\x27\x8e\xd0\xfc\x2d\xbf\xeb\x44\x36\xfb\x68\xd9\x3f\x2f\xaf\xc6\xcd\x95\x73\xb3\xe8\x79\x8d\x9e\x5c\x37\xb7\x0e\xd4\xde\xc6\x6d\xb4\x6d\x38\x9f\x37\x2d\xe8\xff\xed\x71\x6e\x63\x6d\x56\xda\x8b\x99\xe0\x69\xa6\xba\xfd\x5e\x51\x65\x66\xa4\xb7\xa8\x9c\x57\x72\xb6\x7b\x07\x1a\x58\x10\x04\x1d\x64\x41\x92\x5c\xfb\x71\x77\xe7\xb5\x05\x24\xd5\x3d\xcc\xeb\xac\x52\x16\xe3\x5d\x08\x93\x13\xd7\x75\x95\x67\x09\x27\x31\x65\xab\x10\x96\x24\x91\x38\x68\xc8\x53\x9e\x33\x85\x71\x08\xf5\x01\x1d\x36\x79\xaa\xd6\x54\x06\x2b\x54\xa7\x44\x91\x61\x45\x33\xab\x89\x6a\xcd\xe3\xd6\x70\x67\x81\x7d\x9b\xd5\x1b\x9a\xd9\x6b\x0e\x97\x57\xb3\x4e\xcc\x42\xb7\x99\xb9\x01\xb5\x45\xa6\x89\x68\x47\x86\xfe\x54\x13\xc4\x1f\xed\xb4\xbc\x40\xad\x91\x0d\xb7\x96\x5d\x3d\xa4\x65\x2d\xad\xfc\x68\x9d\x61\xb3\x18\x50\x85\x69\xc7\x85\x86\x5e\xc5\xb5\x1d\xdd\x4a\x70\x40\xdf\xd4\x7c\x47\xd9\xac\xee\xea\x6c\x1c\xa1\x46\x44\x45\xeb\x46\xac\xad\x36\xda\xfd\xb8\x3a\xae\xcb\xcc\xcc\xc5\x1d\xce\xce\xab\xd3\xd6\x30\x57\x20\x53\x5d\x73\xba\xdf\x55\xd5\xd5\x0a\x2e\x77\xea\xea\x07\x59\x2e\xd7\x6d\xf8\xae\x4b\x4d\x31\xcc\xc1\xf3\x66\x87\x47\x33\x81\x29\x2f\xb0\xeb\xb0\x39\x1e\xbd\x54\x0c\x64\x96\xd0\x08\x4b\xd4\x18\x4e\xf6\x64\xa2\x6e\x26\x8f\x48\x86\xd5\xe9\xcd\x47\x4d\x9a\x56\x4e\x2a\xad\xfe\xb4\x54\xaf\x19\x8f\xca\x8c\x23\x80\xfe\xe4\xd4\x9e\x1d\x9f\xa0\x6d\x0b\x7d\x44\x86\x2a\xa5\xde\x14\x95\x4d\xb2\x9a\xb6\x3a\x99\xaa\xb5\xfb\x53\x55\x41\x1e\x97\x2b\x57\x2c\xfd\xc9\xea\xfa\x78\x54\xce\xcc\xd9\x8c\xa9\x6e\x9b\x78\x4a\x49\xc2\x57\x07\x8d\x35\x6f\xe0\x12\xe0\xae\x46\x86\x6c\x77\x47\x81\xcb\xb1\xb9\x42\xc6\xe0\xdc\x7c\x3a\x35\x2f\xf4\x69\x3c\xd1\xfa\x13\xfd\x46\x3f\xf7\x9e\xd0\x78\xc2\x97\x13\x1a\x71\x36\x89\x78\x9a\x71\x86\x4c\x79\x1a\x64\xc6\xd6\x89\xe2\x7d\x98\xdd\x2c\x95\xf7\x66\xa0\x5d\x80\xb9\xf1\x64\xd6\x0b\x32\x1e\xc2\xbc\xf4\xd4\xce\x17\x4d\xfa\x94\x9b\xcc\xe7\xe0\x91\xd4\xeb\xe5\x8e\xdd\xcc\x5c\xa8\xf6\x6e\xb1\xb5\x8a\xc9\xbd\xbc\x34\x9b\x5f\x05\xa4\xe3\x47\x63\x88\xdb\x9a\xc9\x7e\xda\x4c\x37\xdc\x9d\x91\xcd\x55\x65\xef\x05\x89\xcb\x81\x00\x96\x5c\x54\x13\x00\xfc\xcf\x3c\x8d\xba\x74\xde\x4d\xe7\x53\x81\x4b\x79\x29\x70\x79\x15\xe8\xaa\x0e\xdd\x84\x31\xb5\x74\x32\xc6\x49\xf7\xc6\xa6\x46\xb3\x67\x57\xce\x5e\xb3\x2c\x57\xcd\x1d\x19\xde\x7e\xd0\xc1\xf4\x76\x84\x16\x47\x0e\x95\xb7\x91\xe3\x1d\xee\xe8\xb2\x96\x3f\x66\x19\x83\xbd\x15\x76\x5b\xdd\x57\xed\xfd\x56\xb3\x83\x56\xff\x65\xc1\xbb\x8e\xee\x14\xdf\x51\x01\xfd\xce\xf8\x9c\xc5\xef\xcd\x10\x78\x70\x34\xdb\xbe\x02\x74\x1b\xe5\x9e\xe9\xac\x48\x83\x7a\xc6\xd4\x00\xd1\x8d\xba\x1c\xdf\xb2\xbc\x1e\xdf\xc6\xbd\x3f\x94\x7c\x36\xa3\x53\xb8\xbd\x9d\x37\xfb\x7e\xc8\x68\xa1\xab\x65\x87\x86\x9d\xf7\xb7\xb5\x6b\xe7\xed\x3f\x99\x26\x9b\x29\x30\x73\x76\xef\xfc\xb7\x4d\x72\xf7\xbd\xce\xbe\xe0\x7b\x8e\xbb\x0c\x5c\x6f\x57\x5d\xc0\x4f\x0f\x8b\xc7\xc7\xf1\x53\x63\x65\x23\x8a\x83\x94\x34\x9d\x26\x90\x8c\x44\x37\xd7\x44\xec\xb6\xb0\xed\x2f\x15\xff\x04\x00\x00\xff\xff\x94\x44\x7a\x77\xf9\x16\x00\x00")

func clientAppJsBytes() ([]byte, error) {
	return bindataRead(
		_clientAppJs,
		"client/app.js",
	)
}

func clientAppJs() (*asset, error) {
	bytes, err := clientAppJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/app.js", size: 5881, mode: os.FileMode(436), modTime: time.Unix(1511950076, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clientIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x58\xdd\x8e\xdb\xb6\x12\xbe\xdf\xa7\xe0\x21\x02\x78\x17\x67\x25\x39\x69\x8b\x06\x0b\xcb\x4d\x9a\xa4\x40\x5a\x24\x0d\xda\x04\x68\xaf\x0a\x4a\x1c\xdb\xac\x29\x92\x25\x29\x79\x8d\x45\x1e\x26\xcf\x52\xf4\xbd\x0a\x52\xa2\x2d\xc9\x72\x6c\x27\xdb\x4d\x53\x5f\x99\xe4\xcc\x37\x9c\x6f\x7e\x3c\xe6\xe4\x7f\x4f\x7f\x7c\xf2\xfa\xd7\x57\xcf\xd0\xc2\x16\x7c\x7a\x36\x59\x00\xa1\xd3\x33\x84\x10\x9a\x14\x60\x09\xca\x17\x44\x1b\xb0\x29\x2e\xed\x2c\x7a\x88\xdb\x47\x0b\x6b\x55\x04\x7f\x94\xac\x4a\xf1\x2f\xd1\x9b\xc7\xd1\x13\x59\x28\x62\x59\xc6\x01\xa3\x5c\x0a\x0b\xc2\xa6\xf8\xf9\xb3\x14\xe8\x1c\x3a\x9a\x82\x14\x90\x62\x0a\x26\xd7\x4c\x59\x26\x45\x4b\xbe\x02\x0b\x9a\x09\x92\x65\xb1\x59\x22\xa0\xcc\x4a\x3d\xa0\x4c\x4a\xbb\x90\xba\xa5\xf7\xfd\x9f\xef\x04\xfa\xa1\xfc\xeb\x9d\x60\x64\x48\xa1\x62\xb0\x52\x52\xdb\x96\xca\x8a\x51\xbb\x48\x29\x54\x2c\x87\xc8\x2f\x2e\x11\x13\xcc\x32\xc2\x23\x93\x13\x0e\xe9\xfd\x78\x7c\x89\x0a\x26\x58\x51\x16\xdb\xad\x80\x6e\x99\xe5\x30\x1d\xba\xf0\x24\xa9\xcf\xce\x6a\x41\xce\xc4\x12\x69\xe0\x29\x36\x76\xcd\xc1\x2c\x00\x2c\x46\x0b\x0d\xb3\x14\x27\xc9\x4c\x0a\x6b\xe2\xb9\x94\x73\x0e\x44\x31\x13\xe7\xb2\x48\x72\x63\xbe\x99\x91\x82\xf1\x75\xfa\x93\xcc\xa4\x95\x57\x5f\x8c\xc7\x97\x5f\x8e\xc7\x97\x5f\x8d\xc7\x97\x5f\xd7\xdf\x99\x25\x9c\xe5\xe1\x3a\x1f\x60\x85\xe5\x52\x04\x33\x2f\x88\xf3\x83\xf0\xff\x3f\xcf\xa5\x30\xc7\x80\xba\x04\x30\x57\x49\x52\x0a\xb5\x9c\x7b\xbc\xaa\x84\xa8\x68\x70\x12\xca\x8c\xed\xec\xc4\xb9\x71\xb8\x35\x70\x1d\x7b\x64\x74\xbe\x07\x68\xa3\x1f\xff\x6e\xf0\x74\x92\xd4\x0a\xd3\x23\xb5\x37\x46\x3f\x40\x95\xdd\x7f\x28\xb6\xb7\x77\xab\xd3\xaf\x40\xae\x99\x34\x35\x88\xff\x1a\x17\xac\x8f\x32\x49\xea\x62\x9b\x64\x92\xae\xa7\x67\x13\xca\x2a\xc4\x68\x8a\x89\x52\x9b\xfc\xa5\x91\x95\x92\x67\x44\xa3\x9c\x13\x63\x52\x5c\xd0\x88\x82\x30\xa1\x9e\xbc\xd4\xe2\x41\xeb\xd4\x27\x1e\x46\x3e\x5a\x29\x9e\x71\xb8\xbe\x42\xf7\x71\x37\x4b\x27\xc9\xe2\x41\x4b\xbf\xa0\x91\x51\x4c\x08\xd0\xa8\xa0\x11\x13\xd4\xc9\x16\x4c\x10\x0b\x2d\x60\x92\xe7\x20\x2c\x46\x55\xc4\x66\x29\x2e\x15\x97\x84\x32\x31\x77\x1e\x6d\x01\xba\xa8\x59\x69\xad\x14\x2d\x0c\x97\x6f\xcd\x2e\x46\x8f\x72\xce\xf2\x65\x2c\x88\x65\x15\xa4\xd8\x90\x0a\x1e\x0b\xfa\xc6\x03\xb7\xdc\x0b\x60\x4e\x77\x9a\x91\x7c\x59\x2a\x6f\xd1\xaf\xb7\xe6\x92\x8d\xbd\x86\xbb\x64\x4b\x5e\xb3\xe3\x08\x0e\x77\x21\x4c\x44\x4d\x23\x08\x29\x19\x0c\x51\x46\xb8\x9c\x47\x4a\xcb\x42\xd9\xce\x35\xdc\xe7\x2a\x70\x9c\xe2\x5a\x22\xae\x19\x1f\x14\x64\x42\x95\x36\x52\x9c\xe4\xb0\x90\x9c\x82\xde\x28\xb5\xf6\x06\x54\x2b\xc2\xcb\xad\x01\xbf\xda\x95\x7a\xe4\xd1\x53\x2c\xc5\x73\xf7\x65\x57\xc0\x17\x69\x8d\xf1\xd4\xfb\x84\x7b\x7c\x75\x3c\xed\xb1\x60\x49\x66\x5c\x3a\xcc\xd8\x35\xd0\xdd\x68\x58\x92\xf9\x64\x15\xb0\x32\x2e\x27\x32\x26\xa8\xf3\x98\x93\xcc\x35\x8b\x7b\xf6\x7c\x54\x80\x31\x64\x0e\xb1\x13\x19\x5d\xf4\x22\xba\x89\xaa\x67\xc8\x45\x82\xb0\x4e\xfe\x74\x04\x3d\xea\xf4\xe6\x06\xdd\xb3\xe7\xb8\x8d\xfb\x1a\xae\x2d\xbe\x40\x6f\xdf\x4e\x92\x5a\x66\x58\x3f\x18\x0a\x17\xed\x44\xa4\x7f\xd7\x57\xdb\xc3\xd1\x05\x46\x8f\x96\xb0\x2e\x55\x0c\xc2\x82\xde\x24\xab\x14\x2f\x61\xf5\xd2\xf9\x3e\x68\x70\xfb\xa9\xa2\x42\x52\xc7\x88\x68\xe4\xeb\x72\xf1\xb7\x19\x60\x24\x19\xa2\x64\x90\x38\xce\xcc\x00\x40\xfb\x34\x62\x16\x0a\x54\x45\x33\xa9\x53\x7c\xee\x16\xee\xe7\x8d\xc2\xf5\x05\x62\x02\x75\x02\xb7\x84\x75\x8a\x9d\xc4\x40\x94\x3a\x24\xba\x9a\x63\x62\x26\x7f\x93\xa5\xe5\x4c\xc0\x40\x25\xee\xe8\x19\x45\xc4\x14\xdd\xdc\x20\x7f\x1f\x17\x2a\xbf\xf3\x5e\x43\xef\xeb\x1c\x28\xf8\x47\xf2\x7a\x76\xe8\x35\x12\x0d\x85\xac\xc0\x91\x7d\x5e\xbb\xfb\x1e\xa7\xda\x8e\xb5\xac\x29\xcd\x0a\xa2\xd7\x78\x4a\x81\x83\x3d\xca\xcb\x7e\xff\x19\x14\xd8\x84\x65\x4f\xe8\x77\x83\x5a\xb7\x31\x92\xf5\xb2\xa0\x5d\x82\x06\xb4\x9b\x60\x0e\x95\x61\x10\xfb\x27\x4a\xb1\xc1\xbe\xed\x6a\x6c\x60\x8f\x2e\xc8\x9f\x6b\xf9\x53\x6a\x32\xa8\xfc\x5b\xca\x72\x27\x98\x77\x5a\x9a\xe8\x6e\x6a\xb3\x21\xfd\x3f\x55\x9e\xfd\x2b\x87\xea\x5c\xc8\x52\x1f\x2a\x4d\x2f\xb3\xb7\x2e\x2d\xc9\xdc\x5f\x89\x7d\xdc\xf8\xe3\xc8\x8d\x92\xfb\x6a\xb6\x2b\xa9\xe5\xea\x30\xe1\x5b\xd0\x7e\xa9\x53\xb2\x6e\x4a\xbc\x2b\xf6\x11\x90\xa4\xb8\x6d\x44\x75\x22\x62\x4b\x70\x2f\x3d\x3d\xb0\xc1\x0e\xd0\xbd\x59\x3d\xd7\x1f\xf6\x40\xcb\xd5\xa6\x1f\x68\xb9\x6a\xb7\x03\x9f\x19\x8e\x73\x83\x51\xd3\x0a\xdc\xd9\x11\x25\x53\x43\xe7\xc0\x7d\xb3\xd6\x72\xe5\x50\xba\x9c\xf8\xc3\x53\x80\x0e\xf4\xd5\xd0\x50\x1a\x7b\xe4\x98\x1f\xfb\xb6\xa5\x93\xfe\x2e\x48\x05\xa2\x9e\x6a\xcf\x47\xed\x19\x77\x74\x89\x46\xa4\x18\x05\x12\x0f\x30\xd5\x36\xef\x3b\x88\xfb\xff\x7e\x44\x3f\xd9\xe8\x1d\xea\x2b\x1d\xc1\x3b\xa1\x5d\x7d\x32\xda\xd5\x67\x4c\xfb\x89\x1d\x60\xb8\xb4\xb7\x02\x7b\xa6\x83\x8f\x18\xb1\x66\x52\x5a\x21\xed\xad\xcf\x58\x01\xf7\xe8\x21\xeb\xbb\x46\xe1\x94\x29\x6b\xa3\x73\x9b\x63\x16\x0a\x6f\x21\x1f\x33\x6f\xd5\x0d\x36\x90\x70\xe2\xd8\xf5\x89\xc6\xa7\xc0\xe6\x67\x3a\x3f\x1d\x18\xa0\xc2\x8e\x09\xef\x38\x94\x55\xe1\xd1\xb0\xa0\x91\x11\x24\x5f\x66\x44\xd7\xaf\x1b\x61\xd5\x7e\xd9\xd8\x34\x43\x30\xea\x85\x99\x0f\x74\xc3\x56\x18\x7a\x04\xdf\xd3\x30\x33\x71\x40\x8d\x73\x2e\x0d\x9c\x5f\xe0\x7e\x31\xfa\xfd\x6f\xad\xd8\x4e\x19\x3b\x4f\x4f\x01\x63\x7a\xd6\x78\x10\x1e\x0c\x29\xcc\x40\xd7\xcf\x86\x44\xa9\x9d\x37\xc1\xe6\x31\x30\xf1\xef\xf1\x7f\x07\x00\x00\xff\xff\x21\x07\xc4\x94\x9f\x17\x00\x00")

func clientIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_clientIndexHtml,
		"client/index.html",
	)
}

func clientIndexHtml() (*asset, error) {
	bytes, err := clientIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/index.html", size: 6047, mode: os.FileMode(436), modTime: time.Unix(1511944284, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"client/app.js": clientAppJs,
	"client/index.html": clientIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"client": &bintree{nil, map[string]*bintree{
		"app.js": &bintree{clientAppJs, map[string]*bintree{}},
		"index.html": &bintree{clientIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

